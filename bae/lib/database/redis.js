// Generated by CoffeeScript 1.7.1
(function() {
  var CODE_EXPIRE_TIME, LOGIN_EXPIRE_TIME, Redis, client, logger;

  Redis = require('redis');

  LOGIN_EXPIRE_TIME = 60 * 60;

  CODE_EXPIRE_TIME = 60;

  logger = require('log4js').getLogger('Redis');

  client = {};

  module.exports = {
    config: function(conf) {
      var host, options, port;
      host = null;
      port = null;
      if (!debug) {
        host = conf.host;
        port = conf.port;
      }
      options = {
        "no_ready_check": true
      };
      client = Redis.createClient(port, host, options);
      client.on('error', function(err) {
        return logger.error(err);
      });
      if (!debug) {
        return client.auth(conf.username + '-' + conf.password + '-' + conf.db);
      }
    },
    setUser: function(user, next) {
      return client.setex(user.id, LOGIN_EXPIRE_TIME, JSON.stringify(user), function(err, result) {
        if (err) {
          logger.error("Set User Error:" + err);
        }
        if (result) {
          return next(result);
        } else {
          return next(null);
        }
      });
    },
    getUser: function(id, next) {
      return client.get(id, function(err, result) {
        if (err) {
          logger.error("Get Item Error:" + err);
        }
        if (result) {
          if (next) {
            next(result);
          }
          return client.expire(id, LOGIN_EXPIRE_TIME);
        } else if (next) {
          return next(null);
        }
      });
    },
    setCode: function(mobile, code, next) {
      return client.setex(mobile, CODE_EXPIRE_TIME, code, function(err, result) {
        if (err) {
          logger.error("Set Code Error:" + err);
        }
        if (result && next) {
          return next(result);
        } else if (next) {
          return next(null);
        }
      });
    },
    getCode: function(mobile, next) {
      return client.get(mobile, function(err, result) {
        if (err) {
          logger.error("Get mobile Error:", err);
        }
        if (result && next) {
          return next(result);
        } else if (next) {
          return next(null);
        }
      });
    },
    delItem: function(key, next) {
      return client.del(key, function(err, result) {
        if (err) {
          logger.error("delItem Error:", err);
        }
        if (result) {
          if (next) {
            return next(result);
          }
        } else if (next) {
          return next(null);
        }
      });
    }
  };

}).call(this);

//# sourceMappingURL=redis.map
