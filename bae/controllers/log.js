// Generated by CoffeeScript 1.7.1
(function() {
  var Client, Error, Log, auth, models, moment;

  models = require('../models');

  Log = models.Log;

  auth = require('../lib/auth');

  Error = require('../lib/error');

  Client = models.Client;

  moment = require('moment');

  module.exports = function(app) {
    app.get('/logs', function(req, res) {
      var data, query;
      data = req.query;
      query = {};
      if (!data.perPage) {
        data.perPage = 100;
      }
      if (!data.page) {
        data.page = 1;
      }
      return Log.aggregate().match(query).project({
        username: '$client',
        c: '$count'
      }).group({
        _id: "$username",
        count: {
          $sum: '$c'
        }
      }).sort({
        count: -1
      }).skip(data.perPage * (data.page - 1)).limit(data.perPage).exec(function(err, result) {
        var count, ids;
        if (err) {
          return Error(err, res);
        } else {
          ids = [];
          count = {};
          result.forEach(function(log) {
            ids.push(log._id);
            return count[log._id] = log.count;
          });
          return Client.find({
            '_id': {
              $in: ids
            }
          }, 'username', function(err, result) {
            var arr, num;
            arr = [];
            num = 1000;
            result.forEach(function(u) {
              return arr.push({
                username: u.username,
                count: count[u._id],
                dm: Math.round(num * Math.random()),
                received: Math.round(num * Math.random()),
                confirmed: Math.round(num * Math.random())
              });
            });
            arr.sort(function(a, b) {
              return -a.count + b.count;
            });
            return res.json({
              status: true,
              results: arr
            });
          });
        }
      });
    });
    return app.get('/realtime', auth.isAuthenticated(), function(req, res) {
      var data;
      data = req.query;
      return Client.find(data, '_id username geo', function(err, clients) {
        var ids, query;
        if (err) {
          return Error(err, res);
        } else {
          ids = [];
          clients.forEach(function(c) {
            return ids.push(c._id);
          });
          query = {
            _id: {
              $in: ids
            },
            created_at: moment().format("YYYY-MM-DD")
          };
          console.log(query);
          return Log.find(query, 'updated_at', function(err, result) {
            var arr, o;
            if (err) {
              return Error(err, res);
            } else {
              arr = [];
              o = {};
              if (result) {
                result.forEach(function(r) {
                  return o[r._id] = r.updated_at;
                });
              }
              clients.forEach(function(c) {
                result = {
                  username: c.username,
                  geo: c.geo
                };
                result.updated_at = o[c._id];
                return arr.push(result);
              });
              return res.json({
                status: true,
                result: arr
              });
            }
          });
        }
      });
    });
  };

}).call(this);

//# sourceMappingURL=log.map
