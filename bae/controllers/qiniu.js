// Generated by CoffeeScript 1.7.1
(function() {
  var Error, ErrorLog, auth, logger, qiniu;

  qiniu = require('qiniu');

  auth = require('../lib/auth');

  logger = require('log4js').getDefaultLogger();

  ErrorLog = require('../models').ErrorLog;

  Error = require('../lib/error');

  module.exports = function(app) {
    qiniu.conf.ACCESS_KEY = 'xyGeW-ThOyxd7OIkwVKoD4tHZmX0K0cYJ6g1kq4J';
    qiniu.conf.SECRET_KEY = 'bJSwo1--7pa-HD3g7fFHaI6e_TOYP1NCk3Z7XM7G';
    app.get('/upload/token', auth.isAuthenticated(), function(req, res) {
      var putPolicy;
      putPolicy = new qiniu.rs.PutPolicy('yfcdn');
      putPolicy.expires = 3600;
      return res.json({
        uptoken: putPolicy.token()
      });
    });
    app.get('/log/token', function(req, res) {
      var putPolicy;
      putPolicy = new qiniu.rs.PutPolicy('yflog');
      putPolicy.expires = 3600;
      putPolicy.callbackUrl = 'http://m.yuefu.com/logged';
      putPolicy.callbackBody = 'name=${key}';
      return res.json({
        uptoken: putPolicy.token()
      });
    });
    app.get('/upload/token/mp3', auth.isAuthenticated(), function(req, res) {
      var putPolicy;
      putPolicy = new qiniu.rs.PutPolicy('yfcdn');
      putPolicy.expires = 3600;
      putPolicy.persistentOps = 'avthumb/mp3/ab/192k;avthumb/mp3/ab/64k';
      putPolicy.persistentNotifyUrl = 'http://m.yuefu.com/notify';
      return res.json({
        uptoken: putPolicy.token()
      });
    });
    app.get('/upload/token/mp3/auto', auth.isAuthenticated(), function(req, res) {
      var putPolicy;
      putPolicy = new qiniu.rs.PutPolicy('yfcdn');
      putPolicy.expires = 3600;
      putPolicy.persistentOps = 'avthumb/mp3/ab/192k;avthumb/mp3/ab/64k';
      putPolicy.persistentNotifyUrl = 'http://m.yuefu.com/notify';
      putPolicy.callbackUrl = 'http://m.yuefu.com/callback';
      putPolicy.callbackBody = 'size=$(fsize)&info=$(avinfo)';
      return res.json({
        uptoken: putPolicy.token()
      });
    });
    app.post('/notify', function(req, res) {
      logger.trace('notify:' + JSON.stringify(req.body));
      return res.json({
        status: true,
        data: req.body
      });
    });
    app.post('/callback', function(req, res) {
      logger.trace(JSON.stringify(req.body));
      return res.json({
        status: true,
        data: req.body
      });
    });
    return app.post('/logged', function(req, res) {
      var log, uploader, url;
      logger.log('logged:' + req.body.name);
      url = req.body.name;
      uploader = url.split('-')[0];
      log = new ErrorLog({
        url: url,
        client: uploader
      });
      return log.save(function(err, result) {
        if (err) {
          return Error(err, res);
        } else {
          logger.warn('logged:' + uploader);
          return res.json({
            status: true
          });
        }
      });
    });
  };

}).call(this);

//# sourceMappingURL=qiniu.map
