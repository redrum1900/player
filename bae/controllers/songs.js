// Generated by CoffeeScript 1.7.1
(function() {
  var Dict, EventProxy, Song, UpdateObject, auth;

  auth = require('../lib/auth');

  Song = require('../models').Song;

  Dict = require('../models').Dict;

  UpdateObject = require('../lib/utils').updateObject;

  EventProxy = require('eventproxy');

  module.exports = function(app) {
    var updateTags;
    updateTags = function(tags) {
      if (tags) {
        return Dict.findOne({
          'key': 'SongTags'
        }, function(err, dic) {
          if (dic) {
            if (dic.list) {
              tags.forEach(function(tag) {
                if (dic.list.indexOf(tag) === -1) {
                  return dic.list.addToSet(tag);
                }
              });
            } else {
              dic.list = tags;
            }
          } else {
            dic = new Dict({
              key: 'SongTags',
              list: tags
            });
          }
          return dic.save();
        });
      }
    };
    app.get('/songs', auth.isAuthenticated(), function(req, res) {
      return res.render('songs');
    });
    app.get('/song/list', auth.isAuthenticated(), function(req, res) {
      var arr, data, ep, query, tags;
      data = req.query;
      query = {};
      if (data.name) {
        query = {
          'name': new RegExp(data.name, 'i')
        };
      }
      tags = data.tags;
      if (tags) {
        arr = tags.split(',');
        query.tags = {
          $all: arr
        };
      }
      ep = new EventProxy();
      ep.fail(function(err) {
        return Error(err, res);
      });
      ep.all('songs', 'count', function(songs, count) {
        return res.json({
          status: true,
          results: songs,
          count: count
        });
      });
      Song.count(query, ep.done('count'));
      return Song.find(query).populate('creator', 'username').populate('updator', 'username').sort({
        'created_at': -1
      }).limit(data.perPage).skip(data.perPage * (data.page - 1)).exec(ep.done('songs'));
    });
    app.post('/song/update', auth.isAuthenticated(), function(req, res) {
      var data;
      data = req.body;
      data.updator = req.user._id;
      return Song.findById(data._id, function(err, result) {
        if (err) {
          return Error(err, res);
        } else {
          UpdateObject(result, data);
          return result.save(function(err, result) {
            if (err) {
              return Error(err, res);
            } else {
              updateTags(result.tags);
              return res.json({
                status: true,
                results: result
              });
            }
          });
        }
      });
    });
    app.post('/song/update/status', auth.isAuthenticated(), function(req, res) {
      var data;
      data = req.body;
      return Song.findByIdAndUpdate(data._id, {
        $set: {
          disabled: data.disabled
        }
      }, function(err, result) {
        if (err) {
          return Error(err, res);
        } else {
          return res.json({
            status: true,
            result: result
          });
        }
      });
    });
    return app.post('/song/add', auth.isAuthenticated(), function(req, res) {
      var data, song;
      data = req.body;
      song = new Song(data);
      song.creator = req.user;
      return song.save(function(err, result) {
        if (err) {
          return Error(err, res);
        } else {
          updateTags(result.tags);
          return res.json({
            status: true,
            results: result
          });
        }
      });
    });
  };

}).call(this);

//# sourceMappingURL=songs.map
