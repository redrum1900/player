// Generated by CoffeeScript 1.7.1
(function() {
  var BroadModalInstanceCtrl, ModalInstanceCtrl, client;

  client = angular.module('UserMApp', ['ngGrid', 'ui.bootstrap', 'ngTagsInput']);

  client.controller('UserMCtrl', function($scope, $http, $modal, $q, $filter) {
    var listUri, updateStatus, updateStatusUri;
    listUri = '/user/list';
    updateStatusUri = '/user/update/status';
    configScopeForNgGrid($scope);
    $scope.search = function() {
      $scope.page = 1;
      $scope.list = null;
      return $scope.getList();
    };
    $scope.getList = function() {
      var tags;
      tags = '';
      if ($scope.s_tags) {
        tags = [];
        $scope.s_tags.forEach(function(tag) {
          return tags.push(tag.text);
        });
        tags = tags.join(',');
      }
      return $http.get(listUri, {
        params: {
          username: $scope.searchText,
          tags: tags,
          page: $scope.page,
          perPage: 20
        }
      }).success(function(result) {
        if (result.status) {
          if (!$scope.list) {
            return $scope.list = result.results;
          } else if (result.results && result.results.length) {
            return result.results.forEach(function(item) {
              return $scope.list.push(item);
            });
          } else {
            return showAlert('没有更多的数据了');
          }
        } else {
          return showAlert(result.error);
        }
      });
    };
    $scope.getList();
    $scope.tags = [];
    getDict($http, 'ClientTags', function(result) {
      if (result && result.list && result.list.length) {
        return result.list.forEach(function(tag) {
          console.log(tag);
          if (typeof tag === 'string') {
            return $scope.tags.push({
              text: tag
            });
          } else {
            return $scope.tags.push(tag);
          }
        });
      }
    });
    $scope.loadTags = function(query) {
      var deffered;
      deffered = $q.defer();
      deffered.resolve($filter('filter')($scope.tags, query));
      return deffered.promise;
    };
    $scope.updateStatus = function(data) {
      if (!data.disabled) {
        return confirm(2, '客户状态更新', '是否确认禁用该客户，一旦禁用后该客户将不能使用软件', function(value) {
          if (value) {
            return updateStatus(data);
          }
        });
      } else {
        return updateStatus(data);
      }
    };
    updateStatus = function(data) {
      $scope.updating = true;
      data.disabled = !data.disabled;
      return $http.post(updateStatusUri, {
        _id: data._id,
        disabled: data.disabled
      }).success(function(result) {
        if (!result.status) {
          showAlert(result.error);
        }
        return $scope.updating = false;
      });
    };
    $scope.page = 1;
    $scope.$on('ngGridEventScroll', function() {
      $scope.page++;
      return $scope.getList();
    });
    $scope.dataGrid = {
      data: 'list',
      multiSelect: false,
      enableRowSelection: false,
      enableSorting: false,
      enableHighlighting: true,
      rowHeight: 40,
      columnDefs: [
        {
          field: "username",
          displayName: "客户名称",
          cellTemplate: textCellTemplate
        }, {
          field: "code",
          displayName: "客户密码",
          cellTemplate: textCellTemplate
        }, {
          field: "parent.username",
          displayName: "总部",
          cellTemplate: textCellTemplate
        }, {
          field: "tags",
          displayName: "标签",
          cellTemplate: textCellTemplate
        }, {
          field: "man",
          displayName: "联系人",
          cellTemplate: textCellTemplate
        }, {
          field: "mobile",
          displayName: "手机号",
          width: 115,
          cellTemplate: textCellTemplate
        }, {
          field: "email",
          displayName: "邮箱",
          cellTemplate: textCellTemplate
        }, {
          field: "creator.username",
          width: 88,
          displayName: "创建者",
          cellTemplate: textCellTemplate
        }, {
          field: "created_at",
          width: 100,
          displayName: "创建时间",
          cellTemplate: dateCellTemplate
        }, {
          field: "handler",
          displayName: "操作",
          width: 150,
          cellTemplate: '<div class="row" ng-style="{height: rowHeight}"> <div class="col-md-12 text-center" style="padding: 0px; display: inline-block; vertical-align: middle; margin-top: 8px"> <a class="btn btn-info btn-xs " ng-click="broadcast(row.entity)">广播</a> <a class="btn btn-primary btn-xs " ng-click="edit(row.entity)">编辑</a> <a class="btn btn-xs" ng-class="getButtonStyle(row.getProperty(\'disabled\'))" ng-click="updateStatus(row.entity)" ng-disabled="updating">{{ isDisabled(row.getProperty("disabled")) }}</a></div></div>'
        }
      ]
    };
    $scope.edit = function(data) {
      $scope.data = data;
      return $scope.open();
    };
    $scope.add = function() {
      $scope.data = {};
      $scope.open();
    };
    $scope.broadcast = function(data) {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'broadcast.html',
        controller: BroadModalInstanceCtrl,
        backdrop: 'static',
        resolve: {
          data: function() {
            return data;
          }
        }
      });
      return modalInstance.result.then((function(data) {}), function() {});
    };
    $scope.open = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'modal.html',
        controller: ModalInstanceCtrl,
        backdrop: 'static',
        resolve: {
          data: function() {
            return angular.copy($scope.data);
          },
          http: function() {
            return $http;
          },
          tags: function() {
            return $scope.tags;
          }
        }
      });
      modalInstance.result.then((function(data) {
        if (!$scope.list) {
          $scope.list = [];
        }
        if (data === 'refresh') {
          $scope.list = null;
          $scope.page = 1;
          $scope.getList();
        } else if (data) {
          $scope.list.unshift(data);
        }
      }), function() {});
    };
  });

  angular.bootstrap(document.getElementById("userMDiv"), ['UserMApp']);

  BroadModalInstanceCtrl = function($scope, $timeout, $http, $modalInstance, $q, $filter, data) {
    var choosed, i, item, listUri, updateStatus, updateStatusUri, validateTime;
    listUri = '/dm/list';
    updateStatusUri = '/dm/update/status';
    configScopeForNgGrid($scope);
    choosed = [];
    if (data.broadcasts) {
      i = 0;
      while (i < data.broadcasts.length) {
        item = data.broadcasts[i];
        choosed.push(item.url);
        i++;
      }
    } else {
      data.broadcasts = [];
    }
    $scope.data = data;
    $scope.search = function() {
      $scope.page = 1;
      $scope.list = null;
      return $scope.getList();
    };
    $scope.getList = function() {
      var tags;
      tags = '';
      if ($scope.s_tags) {
        tags = [];
        $scope.s_tags.forEach(function(tag) {
          return tags.push(tag.text);
        });
        tags = tags.join(',');
      }
      return $http.get(listUri, {
        params: {
          name: $scope.searchText,
          tags: tags,
          page: $scope.page,
          perPage: 20
        }
      }).success(function(result) {
        if (result.status) {
          if (!$scope.list) {
            return $scope.list = result.results;
          } else if (result.results && result.results.length) {
            return result.results.forEach(function(item) {
              return $scope.list.push(item);
            });
          } else {
            return showAlert('没有更多的数据了');
          }
        } else {
          return showAlert(result.error);
        }
      });
    };
    $scope.getList();
    $scope.updateStatus = function(data) {
      if (!data.disabled) {
        return confirm(2, 'DM状态更新', '是否确认禁用该DM，一旦禁用后创建歌单时将不能再选中该DM', function(value) {
          if (value) {
            return updateStatus(data);
          }
        });
      } else {
        return updateStatus(data);
      }
    };
    updateStatus = function(data) {
      $scope.updating = true;
      data.disabled = !data.disabled;
      return $http.post(updateStatusUri, {
        _id: data._id,
        disabled: data.disabled
      }).success(function(result) {
        if (!result.status) {
          showAlert(result.error);
        }
        return $scope.updating = false;
      });
    };
    $scope.page = 1;
    $scope.$on('ngGridEventScroll', function() {
      $scope.page++;
      return $scope.getList();
    });
    $scope.choose = function(item) {
      data.broadcasts.push({
        url: item.url,
        name: item.name,
        duration: item.duration
      });
      return choosed.push(item.url);
    };
    $scope.remove = function(item) {
      var index;
      index = choosed.indexOf(item.url);
      data.broadcasts.splice(index, 1);
      return choosed.splice(index, 1);
    };
    $scope.dataGrid = {
      data: 'list',
      multiSelect: false,
      enableRowSelection: false,
      enableSorting: false,
      enableHighlighting: true,
      rowHeight: 40,
      columnDefs: [
        {
          field: "name",
          displayName: "名称",
          cellTemplate: textCellTemplate
        }, {
          field: "tags",
          displayName: "标签",
          cellTemplate: textCellTemplate
        }, {
          field: "handler",
          displayName: "操作",
          width: 150,
          cellTemplate: '<div class="row" ng-style="{height: rowHeight}"> <div class="col-md-12 text-center" style="padding: 0px; display: inline-block; vertical-align: middle; margin-top: 8px"> <a class="btn btn-default btn-xs" ng-click="try(row.entity)">试听</a> <a class="btn btn-primary btn-xs" ng-click="choose(row.entity)">选取</a> </div></div>'
        }
      ]
    };
    $scope["try"] = function(data) {
      window.open(imgHost + data.url + '?pfop/avthumb/mp3/ab/64k', '_blank');
    };
    $scope.tags = [];
    getDict($http, 'DMTags', function(result) {
      if (result && result.list && result.list.length) {
        return result.list.forEach(function(tag) {
          if (typeof tag === 'string') {
            return $scope.tags.push({
              text: tag
            });
          } else {
            return $scope.tags.push(tag);
          }
        });
      }
    });
    $scope.loadTags = function(query) {
      var deffered;
      deffered = $q.defer();
      deffered.resolve($filter('filter')($scope.tags, query));
      return deffered.promise;
    };
    validateTime = function(time) {
      var arr, h, m, wrong;
      if (!time) {
        wrong = true;
      } else {
        wrong = false;
        if (time.indexOf(':') === -1) {
          wrong = true;
        } else {
          arr = time.split(':');
          if (arr.length !== 2) {
            wrong = true;
          } else {
            h = parseInt(arr[0]);
            m = parseInt(arr[1]);
            time = moment({
              hour: h,
              minute: m
            });
            if (!time.isValid()) {
              wrong = true;
            }
          }
        }
      }
      if (wrong) {
        return false;
      } else {
        return true;
      }
    };
    $scope.ok = function() {
      var wrong;
      wrong = false;
      data.broadcasts.forEach(function(item) {
        if (item.playTime && !validateTime(item.playTime)) {
          wrong = true;
          return false;
        }
      });
      if (wrong) {
        confirm(1, '开始播放的时间格式不对', '注意冒号格式，应该是 8:00或18:00 这样的，广播时间可以留空');
        return;
      }
      return $http.post('/user/update', {
        _id: data._id,
        broadcasts: data.broadcasts
      }).success(function(result) {
        if (!result.status) {
          confirm(1, '更新失败', result.result);
        }
        return $modalInstance.close();
      }).error(function(error) {
        $scope.msg = "出错了，请稍后再试";
        return $scope.buttonDisabled = false;
      });
    };
    return $scope.cancel = function() {
      return $modalInstance.close();
    };
  };

  ModalInstanceCtrl = function($scope, $timeout, $modalInstance, data, http, tags, $q, $filter) {
    var getParents;
    $scope.data = data;
    $scope.buttonDisabled = false;
    $scope.tags = tags;
    getParents = function() {
      return http.get('/user/parents').success(function(result) {
        return $scope.parents = result.result;
      });
    };
    getParents();
    if (data._id) {
      $scope.update = true;
      $scope.title = '编辑客户';
    } else {
      $scope.title = '新增客户';
    }
    $scope.loadTags = function(query) {
      var deffered;
      deffered = $q.defer();
      deffered.resolve($filter('filter')($scope.tags, query));
      return deffered.promise;
    };
    $scope.cancel = function() {
      $modalInstance.close();
    };
    $scope.select = function(value) {
      $scope.selectedType = value;
    };
    return $scope.ok = function() {
      var msg;
      data = angular.copy($scope.data);
      if (!data.username) {
        msg = '客户名称必填';
      }
      if (msg) {
        $scope.msg = msg;
      } else {
        tags = [];
        if (data.tags) {
          data.tags.forEach(function(tag) {
            if (typeof tag === 'string') {
              return tags.push(tag);
            } else {
              return tags.push(tag.text);
            }
          });
        }
        data.tags = tags;
        $scope.buttonDisabled = true;
        if ($scope.update) {
          delete data['parent'];
          return http.post('/user/update', data).success(function(result) {
            if (result.status) {
              return $modalInstance.close('refresh');
            } else {
              $scope.msg = result.results;
              return $scope.buttonDisabled = false;
            }
          }).error(function(error) {
            $scope.msg = '出错了，请稍后再试';
            return $scope.buttonDisabled = false;
          });
        } else {
          return http.post("/user/add", data).success(function(result) {
            if (result.status) {
              return $modalInstance.close(result.results);
            } else {
              $scope.msg = result.results;
              return $scope.buttonDisabled = false;
            }
          }).error(function(error) {
            $scope.msg = "出错了，请稍后再试";
            return $scope.buttonDisabled = false;
          });
        }
      }
    };
  };

}).call(this);

//# sourceMappingURL=client.map
