// Generated by CoffeeScript 1.7.1
(function() {
  var ModalInstanceCtrl, research;

  research = angular.module('ResearchApp', ['ngGrid', 'ngTagsInput', 'ui.bootstrap', 'ngRoute']);

  research.value('Research', {});

  research.controller('ResearchCtrl', function($scope, $http, $modal, $route, $routeParams, Research, $location) {
    var isRebuild;
    $scope.$routeParams = $routeParams;
    $scope.$route = $route;
    $location.path('');
    $scope.status = 'all';
    $scope.$watch('status', function() {
      $scope.researches = void 0;
      return $scope.getList();
    });
    $scope.search = function() {
      $scope.page = 1;
      $scope.researches = null;
      return $scope.getList();
    };
    $scope.getList = function() {
      return $http.get('/research/list', {
        params: {
          name: $scope.searchText,
          page: $scope.page,
          perPage: 20,
          status: $scope.status
        }
      }).success(function(result) {
        if (result.status) {
          if (!$scope.researches) {
            return $scope.researches = result.results;
          } else if (result.results && result.results.length) {
            return result.results.forEach(function(research) {
              return $scope.researches.push(research);
            });
          } else {
            return showAlert('没有更多的数据了');
          }
        } else {
          return showAlert(result.results);
        }
      });
    };
    configScopeForNgGrid($scope);
    configScopeForNgGrid($scope);
    $scope.updateStatus = function(data) {
      $scope.updating = true;
      data.disabled = !data.disabled;
      return $http.post('/research/update/status', {
        _id: data._id,
        disabled: data.disabled
      }).success(function(result) {
        return $scope.updating = false;
      });
    };
    $scope.page = 1;
    $scope.$on('ngGridEventScroll', function() {
      $scope.page++;
      return $scope.getList();
    });
    $scope.researchGrid = {
      data: 'researches',
      multiSelect: false,
      enableRowSelection: false,
      enableSorting: false,
      rowHeight: 40,
      columnDefs: [
        {
          field: "name",
          displayName: "名称",
          cellTemplate: textCellTemplate
        }, {
          field: "participation_num",
          displayName: "参与人数",
          width: 68,
          cellTemplate: textCellTemplate
        }, {
          field: "creator.username",
          width: 88,
          displayName: "创建者",
          cellTemplate: textCellTemplate
        }, {
          field: "created_at",
          width: 100,
          displayName: "创建时间",
          cellTemplate: dateCellTemplate
        }, {
          field: "updator.username",
          width: 88,
          displayName: "更新者",
          cellTemplate: textCellTemplate
        }, {
          field: "updated_at",
          width: 100,
          displayName: "更新时间",
          cellTemplate: dateCellTemplate
        }, {
          field: "begin_date",
          width: 100,
          displayName: "起始时间",
          cellTemplate: dateCellTemplate
        }, {
          field: "end_date",
          width: 100,
          displayName: "截止时间",
          cellTemplate: dateCellTemplate
        }, {
          field: "handler",
          displayName: "操作",
          width: 160,
          cellTemplate: '<div class="row" ng-style="{height: rowHeight}"> <div class="col-md-8 col-md-offset-2" style="padding: 0px; display: inline-block; vertical-align: middle; margin-top: 8px"> <a class="btn btn-success btn-xs col-md-4" ng-click="edit(row.entity)">编辑</a> <a class="btn btn-info btn-xs col-md-4" ng-click="rebuild(row.entity)">重建</a> <a class="btn btn-xs col-md-4" ng-class="getButtonStyle(row.getProperty(\'disabled\'))" ng-click="updateStatus(row.entity)" ng-disabled="updating">{{ isDisabled(row.getProperty("disabled")) }}</a></div></div>'
        }
      ]
    };
    isRebuild = false;
    $scope.edit = function(data) {
      angular.extend(Research, data);
      isRebuild = false;
      return $scope.open();
    };
    $scope.rebuild = function(data) {
      angular.extend(Research, data);
      isRebuild = true;
      return $scope.open();
    };
    $scope.add = function() {
      Research = {};
      isRebuild = false;
      $scope.open();
    };
    $scope.open = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'modal.html',
        backdrop: 'static',
        controller: ModalInstanceCtrl,
        resolve: {
          http: function() {
            return $http;
          },
          route: function() {
            return $route;
          },
          research: function() {
            return Research;
          },
          location: function() {
            return $location;
          },
          isRebuild: function() {
            return isRebuild;
          }
        }
      });
      modalInstance.result.then((function(data) {
        $location.path('');
        if (!$scope.researches) {
          $scope.researches = [];
        }
        if (data === 'refresh') {
          $scope.researches = null;
          $scope.page = 1;
          $scope.getList();
        } else if (data) {
          $scope.researches.unshift(data);
        }
      }), function() {
        $location.path('');
      });
    };
  });

  research.config(function($routeProvider) {
    return $routeProvider.when('/', {
      templateUrl: 'templates/html/step1.html',
      controller: 'Step1Ctrl'
    }).when('/step2', {
      templateUrl: 'templates/html/step2.html',
      controller: 'Step2Ctrl'
    }).when('/step3', {
      templateUrl: 'templates/html/step3.html',
      controller: 'Step3Ctrl'
    });
  });

  research.controller('Step1Ctrl', function($scope, $http, $q, $filter, $routeParams, Research) {
    configDateForScope($scope);
    $scope.Research = Research;
    $scope.tags = [];
    getDict($http, 'ResearchTags', function(result) {
      if (result && result.list && result.list.length) {
        return result.list.forEach(function(tag) {
          console.log(tag);
          if (typeof tag === 'string') {
            return $scope.tags.push({
              text: tag
            });
          } else {
            return $scope.tags.push(tag);
          }
        });
      }
    });
    return $scope.loadTags = function(query) {
      var deffered;
      deffered = $q.defer();
      deffered.resolve($filter('filter')($scope.tags, query));
      return deffered.promise;
    };
  });

  research.controller('Step2Ctrl', function($scope, $http, Research) {
    var gotQuestions;
    $scope.Research = Research;
    configScopeForNgGrid($scope);
    configScopeForQuestionType($scope);
    gotQuestions = void 0;
    if (!Research.questions) {
      Research.questions = [];
    }
    $scope.choosedQuestions = Research.questions;
    $scope.search = function() {
      $scope.page = 1;
      $scope.questions = null;
      return $scope.getQuestions();
    };
    $scope.getQuestions = function() {
      return $http.get('/question/list', {
        params: {
          title: $scope.titleSearch,
          page: $scope.page,
          perPage: 10
        }
      }).success(function(result) {
        if (result.status) {
          if (!$scope.questions) {
            $scope.questions = result.results;
            if (!gotQuestions) {
              gotQuestions = $scope.questions.concat();
              Research.gotQuestions = gotQuestions;
            }
            return $scope.judgeQeustionIfChoosed();
          } else if (result.results && result.results.length) {
            result.results.forEach(function(question) {
              return $scope.questions.push(question);
            });
            return $scope.judgeQeustionIfChoosed();
          } else {
            $scope.page -= 1;
            return $scope.$emit('error', '没有更多的数据了');
          }
        } else {
          return $scope.$emit('error', result.error);
        }
      });
    };
    $scope.page = 1;
    $scope.getQuestions();
    $scope.$on('ngGridEventScroll', function() {
      $scope.page++;
      return $scope.getQuestions();
    });
    $scope.judgeQeustionIfChoosed = function() {
      if ($scope.questions && $scope.choosedQuestions) {
        return $scope.questions.forEach(function(question) {
          question.choosed = $scope.choosedQuestions.indexOf(question._id) !== -1;
          if (gotQuestions.indexOf(question === -1)) {
            return gotQuestions.push(question);
          }
        });
      }
    };
    $scope.checked = function(question) {
      if (question.choosed) {
        $scope.choosedQuestions.push(question._id);
      } else if ($scope.choosedQuestions) {
        $scope.choosedQuestions.splice($scope.choosedQuestions.indexOf(question._id), 1);
      }
      return console.log($scope.choosedQuestions, Research.questions);
    };
    $scope.tempList = $scope.questions;
    $scope.showChoosed = function() {
      var all, details;
      if ($scope.onlyShowChoosed) {
        $scope.tempList = $scope.questions;
        all = $scope.choosedQuestions.concat();
        details = [];
        if (gotQuestions) {
          gotQuestions.forEach(function(question) {
            var qIndex;
            qIndex = all.indexOf(question._id);
            if (qIndex !== -1) {
              question.index = $scope.choosedQuestions.indexOf(question._id);
              details.push(question);
              return all.splice(qIndex, 1);
            }
          });
          if (!all.length) {
            return $scope.questions = details;
          } else {
            return $http.post('/question/list', all).success(function(result) {
              if (result.status) {
                result.results.forEach(function(question) {
                  question.choosed = true;
                  return details.push(question);
                });
                return $scope.questions = details;
              } else {
                return $scope.$emit('error', result.error);
              }
            });
          }
        } else {
          return $scope.questions = [];
        }
      } else {
        return $scope.questions = $scope.tempList;
      }
    };
    return $scope.questionGrid = {
      data: 'questions',
      multiSelect: false,
      enableRowSelection: false,
      enableSorting: false,
      columnDefs: [
        {
          field: "title",
          displayName: "标题",
          cellTemplate: textCellTemplate
        }, {
          field: "type",
          displayName: "类型",
          width: 48,
          cellTemplate: questionTypeTemplate
        }, {
          field: "image",
          displayName: "配图",
          width: 45,
          cellTemplate: imgCellTemplate
        }, {
          field: "creator.username",
          width: 88,
          displayName: "创建者",
          cellTemplate: textCellTemplate
        }, {
          field: "created_at",
          width: 100,
          displayName: "创建时间",
          cellTemplate: dateCellTemplate
        }, {
          field: "handler",
          displayName: "排序选题",
          width: 100,
          cellTemplate: '<div class="row" ng-style="{height: rowHeight}"> <div class="col-md-8 col-md-offset-2" style="margin-top: 2px;"> <input type="number" style="width: 40px" tooltip-append-to-body="true" ng-model="row.entity.index" tooltip="排序" ng-show="onlyShowChoosed" ng-hide="!onlyShowChoosed"> <input type="checkbox" style="margin-top: 7px" ng-checked="row.entity.choosed" tooltip="选题" tooltip-append-to-body="true" ng-model="row.entity.choosed" ng-change="checked(row.entity)"> </div> </div>'
        }
      ]
    };
  });

  research.controller('Step3Ctrl', function($scope, $http, Research) {
    var gotUsers, listUri;
    $scope.Research = Research;
    listUri = '/user/list';
    configScopeForNgGrid($scope);
    gotUsers = void 0;
    if (!Research.users) {
      Research.users = [];
    }
    $scope.choosedUsers = Research.users;
    $scope.search = function() {
      $scope.page = 1;
      $scope.users = null;
      return $scope.getList();
    };
    $scope.getList = function() {
      return $http.get(listUri, {
        params: {
          username: $scope.searchText,
          page: $scope.page,
          perPage: 20
        }
      }).success(function(result) {
        if (result.status) {
          if (!$scope.users) {
            $scope.users = result.results;
            if (!gotUsers) {
              gotUsers = $scope.users.concat();
              Research.gotUsers = gotUsers;
            }
            return $scope.judgeQeustionIfChoosed();
          } else if (result.results && result.results.length) {
            result.results.forEach(function(item) {
              return $scope.users.push(item);
            });
            return $scope.judgeQeustionIfChoosed();
          } else {
            $scope.page -= 1;
            return $scope.$emit('error', '没有更多的数据了');
          }
        } else {
          return $scope.$emit('error', result.error);
        }
      });
    };
    $scope.getList();
    $scope.page = 1;
    $scope.$on('ngGridEventScroll', function() {
      $scope.page++;
      return $scope.getList();
    });
    $scope.judgeQeustionIfChoosed = function() {
      if ($scope.users && $scope.choosedUsers) {
        return $scope.users.forEach(function(user) {
          user.choosed = $scope.choosedUsers.indexOf(user._id) !== -1;
          if (gotUsers.indexOf(user === -1)) {
            return gotUsers.push(user);
          }
        });
      }
    };
    $scope.checked = function(user) {
      if (user.choosed) {
        return $scope.choosedUsers.push(user._id);
      } else if ($scope.choosedUsers) {
        return $scope.choosedUsers.splice($scope.choosedUsers.indexOf(user._id), 1);
      }
    };
    $scope.tempList = $scope.users;
    $scope.onlyShowChoosed = false;
    $scope.showChoosed = function() {
      var all, details;
      $scope.onlyShowChoosed = !$scope.onlyShowChoosed;
      if ($scope.onlyShowChoosed) {
        $scope.tempList = $scope.users;
        all = $scope.choosedUsers.concat();
        details = [];
        if (gotUsers) {
          gotUsers.forEach(function(question) {
            var qIndex;
            qIndex = all.indexOf(question._id);
            if (qIndex !== -1) {
              if (!question.index) {
                question.index = details.length + 1;
              }
              details.push(question);
              return all.splice(qIndex, 1);
            }
          });
          if (!all.length) {
            return $scope.users = details;
          } else {
            return $http.post('/user/list', all).success(function(result) {
              if (result.status) {
                result.results.forEach(function(question) {
                  question.choosed = true;
                  return details.push(question);
                });
                return $scope.users = details;
              } else {
                return $scope.$emit('error', result.error);
              }
            });
          }
        } else {
          return $scope.users = [];
        }
      } else {
        return $scope.users = $scope.tempList;
      }
    };
    return $scope.dataGrid = {
      data: 'users',
      multiSelect: false,
      enableRowSelection: false,
      enableSorting: false,
      columnDefs: [
        {
          field: "username",
          displayName: "用户名",
          cellTemplate: textCellTemplate
        }, {
          field: "mobile",
          displayName: "手机号",
          width: 115,
          cellTemplate: textCellTemplate
        }, {
          field: "email",
          displayName: "邮箱",
          cellTemplate: textCellTemplate
        }, {
          field: "creator.username",
          width: 88,
          displayName: "创建者",
          cellTemplate: textCellTemplate
        }, {
          field: "created_at",
          width: 100,
          displayName: "创建时间",
          cellTemplate: dateCellTemplate
        }, {
          field: "handler",
          displayName: "选中",
          width: 50,
          cellTemplate: '<div class="row" ng-style="{height: rowHeight}"> <div class="col-md-8 col-md-offset-2" style="margin-top: 2px;"> <input type="checkbox" style="margin-top: 7px" ng-checked="row.entity.choosed" tooltip="选人" tooltip-append-to-body="true" ng-model="row.entity.choosed" ng-change="checked(row.entity)"> </div> </div>'
        }
      ]
    };
  });

  ModalInstanceCtrl = function($scope, $modalInstance, http, route, Research, location, isRebuild) {
    $scope.$on('error', function(event, args) {
      return $scope.msg = args;
    });
    $scope.step = 0;
    $scope.isActive = function(step) {
      return step === $scope.step;
    };
    $scope.getLabel = function() {
      if ($scope.step !== 2) {
        return '下一步';
      } else {
        return '完成';
      }
    };
    $scope.pre = function() {
      if ($scope.step > 0) {
        $scope.step -= 1;
      }
      return $scope.changeStep();
    };
    $scope.changeStep = function() {
      if ($scope.step === 1) {
        location.path('/step2');
      } else if ($scope.step === 2) {
        location.path('/step3');
      } else if ($scope.step === 0) {
        location.path('/');
      } else {
        $scope.ok();
      }
      return $scope.showPre = $scope.step !== 0;
    };
    $scope.next = function() {
      var arr, i, msg, q;
      if ($scope.step === 0) {
        if (!Research.name) {
          msg = '研究名称不能为空';
        }
        if (msg) {
          return $scope.msg = msg;
        }
      } else if ($scope.step === 1) {
        if (Research.questions && Research.gotQuestions) {
          arr = [];
          Research.gotQuestions.sort(function(a, b) {
            return a.index - b.index;
          });
          console.log(Research.questions, Research.gotQuestions.length);
          i = 0;
          while (i < Research.gotQuestions.length) {
            q = Research.gotQuestions[i];
            if (Research.questions.indexOf(q._id) !== -1 && arr.indexOf(q._id) === -1) {
              arr.push(q._id);
            }
            i++;
          }
          Research.questions = arr;
          delete Research['gotQuestions'];
        }
        console.log(Research.questions);
      } else if ($scope.step === 2) {
        $scope.ok();
      }
      $scope.msg = '';
      if ($scope.step < 2) {
        $scope.step += 1;
      }
      return $scope.changeStep();
    };
    $scope.buttonDisabled = false;
    if (Research._id && !isRebuild) {
      $scope.update = true;
      $scope.title = '编辑研究';
    } else {
      $scope.title = '新建研究';
    }
    $scope.change = function(u) {
      return $scope.user_pro = u;
    };
    $scope.addImage = function() {};
    $scope.cancel = function() {
      $modalInstance.close();
    };
    $scope.select = function(value) {
      $scope.selectedType = value;
    };
    $scope.ok = function() {
      var tags;
      $scope.buttonDisabled = true;
      delete Research['gotUsers'];
      console.log(Research);
      tags = [];
      if (Research.tags) {
        Research.tags.forEach(function(tag) {
          if (typeof tag === 'string') {
            return tags.push(tag);
          } else {
            return tags.push(tag.text);
          }
        });
      }
      Research.tags = tags;
      console.log(Research.tags);
      if ($scope.update) {
        http.post('/research/update', Research).success(function(result) {
          if (result.status) {
            return $modalInstance.close('refresh');
          } else {
            $scope.msg = result.results;
            return $scope.buttonDisabled = false;
          }
        }).error(function(error) {
          $scope.msg = '出错了，请稍后再试';
          return $scope.buttonDisabled = false;
        });
      } else {
        http.post('/research/add', Research).success(function(result) {
          if (result.status) {
            return $modalInstance.close(result.results);
          } else {
            $scope.msg = result.results;
            return $scope.buttonDisabled = false;
          }
        }).error(function(error) {
          $scope.msg = '出错了，请稍后再试';
          return $scope.buttonDisabled = false;
        });
      }
    };
  };

  angular.bootstrap(document.getElementById("researchDiv"), ['ResearchApp']);

}).call(this);

//# sourceMappingURL=research.map
