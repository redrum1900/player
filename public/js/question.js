// Generated by CoffeeScript 1.7.1
(function() {
  var ModalInstanceCtrl, question;

  question = angular.module('QuestionApp', ['ngGrid', 'ui.bootstrap', 'angularFileUpload']);

  question.controller('QuestionCtrl', function($scope, $http, $modal, $upload) {
    configScopeForQuestionType($scope);
    GetToken($http, function(result) {
      if (result) {
        $scope.token = result;
      }
    });
    $scope.search = function() {
      $scope.page = 1;
      $scope.questions = null;
      return $scope.getQuestions();
    };
    $scope.getQuestions = function() {
      return $http.get('/question/list', {
        params: {
          title: $scope.titleSearch,
          page: $scope.page,
          perPage: 20
        }
      }).success(function(result) {
        console.log(result);
        if (result.status) {
          if (!$scope.questions) {
            return $scope.questions = result.results;
          } else if (result.results && result.results.length) {
            return result.results.forEach(function(question) {
              return $scope.questions.push(question);
            });
          } else {
            return showAlert('没有更多的数据了');
          }
        } else {
          return showAlert(result.results);
        }
      });
    };
    $scope.getQuestions();
    configScopeForNgGrid($scope);
    $scope.updateStatus = function(data) {
      $scope.updating = true;
      data.disabled = !data.disabled;
      return $http.post('/question/update/status', {
        _id: data._id,
        disabled: data.disabled
      }).success(function(result) {
        console.log(result.status);
        return $scope.updating = false;
      });
    };
    $scope.page = 1;
    $scope.$on('ngGridEventScroll', function() {
      $scope.page++;
      return $scope.getQuestions();
    });
    $scope.questionGrid = {
      data: 'questions',
      multiSelect: false,
      enableRowSelection: false,
      enableSorting: false,
      rowHeight: 40,
      columnDefs: [
        {
          field: "title",
          displayName: "标题",
          cellTemplate: textCellTemplate
        }, {
          field: "type",
          displayName: "类型",
          width: 48,
          cellTemplate: questionTypeTemplate
        }, {
          field: "image",
          displayName: "配图",
          width: 45,
          cellTemplate: imgCellTemplate
        }, {
          field: "creator.username",
          width: 88,
          displayName: "创建者",
          cellTemplate: textCellTemplate
        }, {
          field: "created_at",
          width: 100,
          displayName: "创建时间",
          cellTemplate: dateCellTemplate
        }, {
          field: "updator.username",
          width: 88,
          displayName: "更新者",
          cellTemplate: textCellTemplate
        }, {
          field: "updated_at",
          width: 100,
          displayName: "更新时间",
          cellTemplate: dateCellTemplate
        }, {
          field: "handler",
          displayName: "操作",
          width: 100,
          cellTemplate: '<div class="row" ng-style="{height: rowHeight}"> <div class="col-md-8 col-md-offset-2" style="padding: 0px; display: inline-block; vertical-align: middle; margin-top: 8px"> <a class="btn btn-primary btn-xs col-md-5" ng-click="edit(row.entity)">编辑</a> <a class="btn btn-xs col-md-5 col-md-offset-2" ng-class="getButtonStyle(row.getProperty(\'disabled\'))" ng-click="updateStatus(row.entity)" ng-disabled="updating">{{ isDisabled(row.getProperty("disabled")) }}</a></div></div>'
        }
      ]
    };
    $scope.edit = function(data) {
      $scope.data = data;
      return $scope.open();
    };
    $scope.add = function() {
      $scope.data = {
        answers: []
      };
      $scope.open();
    };
    $scope.open = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'modal.html',
        backdrop: 'static',
        controller: ModalInstanceCtrl,
        resolve: {
          types: function() {
            return $scope.types;
          },
          data: function() {
            return $scope.data;
          },
          upload: function() {
            return $upload;
          },
          token: function() {
            return $scope.token;
          },
          http: function() {
            return $http;
          }
        }
      });
      modalInstance.result.then((function(data) {
        if (!$scope.questions) {
          $scope.questions = [];
        }
        if (data === 'refresh') {
          $scope.questions = null;
          $scope.page = 1;
          $scope.getQuestions();
        } else if (data) {
          $scope.questions.unshift(data);
        }
      }), function() {});
    };
  });

  angular.bootstrap(document.getElementById("questionDiv"), ['QuestionApp']);

  ModalInstanceCtrl = function($scope, $modalInstance, types, data, upload, token, http) {
    $scope.types = types;
    http.get('/dict/get', {
      params: {
        key: 'QUserPros'
      }
    }).success(function(result) {
      if (result.status) {
        return $scope.user_pros = result.results.list;
      } else {
        return showAlert(result.error);
      }
    });
    $scope.data = data;
    $scope.buttonDisabled = false;
    if (data.title) {
      $scope.update = true;
      $scope.title = '编辑问题';
    } else {
      $scope.title = '新增问题';
    }
    $scope.addOption = function() {
      $scope.data.answers.push({
        content: '',
        image: '',
        need_reason: false
      });
    };
    $scope["delete"] = function(option) {
      return $scope.data.answers.splice($scope.data.answers.indexOf(option), 1);
    };
    $scope.change = function(u) {
      return $scope.user_pro = u;
    };
    $scope.onFileSelected = function($files, option) {
      var file, _fn, _i, _len;
      _fn = function(file) {
        $scope.buttonDisabled = true;
        upload.upload({
          url: uploadHost,
          data: {
            token: token,
            key: new Date() + '.jpg'
          },
          file: file
        }).progress(function(evt) {
          console.log(evt);
        }).success(function(data, status, headers, config) {
          if (status === 200) {
            option.image = imgHost + data.key + '?imageView2/1/w/30/h/30';
          }
          $scope.buttonDisabled = false;
        });
      };
      for (_i = 0, _len = $files.length; _i < _len; _i++) {
        file = $files[_i];
        _fn(file);
      }
    };
    $scope.addImage = function() {};
    $scope.cancel = function() {
      $modalInstance.close();
    };
    $scope.$watch('data.type', function(nv, ov) {
      console.log(nv);
      if (nv === 4) {
        return $scope.choose4 = true;
      } else {
        return $scope.choose4 = false;
      }
    });
    $scope.ok = function() {
      var msg, option, _fn, _i, _len, _ref;
      console.log(data);
      if (!$scope.data.type) {
        msg = '您还没选择题目类型';
      } else if (!$scope.data.title) {
        msg = '请输入题目标题';
      } else if (data.type === 4 && parseInt(data.score) === 0) {
        msg = '评分不能为0';
      } else {
        _ref = $scope.data.answers;
        _fn = function(option) {
          if (!option.content && !option.image) {
            return msg = '选项的内容或图片必填一项';
          }
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          option = _ref[_i];
          _fn(option);
        }
      }
      if (msg) {
        $scope.msg = msg;
        return;
      } else {
        $scope.buttonDisabled = true;
        if ($scope.update) {
          http.post('/question/update', $scope.data).success(function(result) {
            if (result.status) {
              return $modalInstance.close('refresh');
            } else {
              $scope.msg = result.results;
              return $scope.buttonDisabled = false;
            }
          }).error(function(error) {
            $scope.msg = '出错了，请稍后再试';
            return $scope.buttonDisabled = false;
          });
        } else {
          http.post('/question/add', $scope.data).success(function(result) {
            if (result.status) {
              return $modalInstance.close(result.results);
            } else {
              $scope.msg = result.results;
              return $scope.buttonDisabled = false;
            }
          }).error(function(error) {
            $scope.msg = '出错了，请稍后再试';
            return $scope.buttonDisabled = false;
          });
        }
      }
    };
  };

}).call(this);

//# sourceMappingURL=question.map
