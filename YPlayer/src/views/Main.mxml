<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"  color="0xffffff"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 creationComplete="inited(event)" xmlns:views="views.*"
		 >

	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.greensock.easing.Cubic;
			import com.pamakids.components.PAlert;
			import com.pamakids.components.controls.SoundPlayer;
			import com.pamakids.events.ODataEvent;
			import com.pamakids.manager.FileManager;
			import com.pamakids.manager.LoadManager;
			import com.pamakids.managers.PopupBoxManager;
			import com.pamakids.models.ResultVO;
			import com.pamakids.services.ServiceBase;
			import com.pamakids.utils.DateUtil;
			import com.pamakids.utils.URLUtil;
			import com.youli.messengers.PreloaderMessenger;
			
			import flash.net.navigateToURL;
			import flash.utils.setTimeout;
			
			import mx.events.FlexEvent;
			
			import controllers.AA;
			import controllers.API;
			
			import models.InsertVO;
			import models.SongVO;

			[Bindable]
			public var volume:int = 80;

			private var downX:Number;
			private var player1:SoundPlayer;

			protected function thumb_mouseDownHandler(event:MouseEvent):void
			{
				event.stopImmediatePropagation();
				thumb.startDrag(false, new Rectangle(0,thumb.y,track.width,0));
				stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				downX = event.stageX;
			}

			protected function mouseUpHandler(event:MouseEvent):void
			{
				thumb.stopDrag();
				stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			}

			protected function mouseMoveHandler(event:MouseEvent):void
			{
				volume = thumb.x*100/track.width
				player.volume = volume/100;
			}

			protected function volumeGroup_mouseDownHandler(event:MouseEvent):void
			{
				event.stopImmediatePropagation();
				var v:int = volumeGroup.globalToLocal(new Point(event.stageX, 0)).x;
				toVolume(v);
			}

			private function toVolume(v:int):void
			{
				TweenLite.to(this, 0.3, {volume:v, ease:Cubic.easeOut});
				player.volume = v/100;
			}

//			private static const SOUND_FILE:String = "http://yuefumedia.qiniudn.com/1.mp3";

			private var player:SoundPlayer;
//			private var soundVisualizer:SoundVisualizer;
			
			private var retried:Boolean;

			protected function inited(event:FlexEvent):void
			{
				//				var t:Timer = new Timer(1000);
				//				t.start();
				//				t.addEventListener(TimerEvent.TIMER, function(e:TimerEvent):void{
				//					updateTime();
				//				});
				//				updateTime();

				api = API.instance;

				initPlayer();
				panelGroup.y = info.y+info.height-3;
				panelGroup.height = height-57-48;
				panelGroup.x = 2;
				panelGroup.width = width-4;

				LoadManager.instance.addEventListener(IOErrorEvent.IO_ERROR, function(e:Event):void{
					if(autoLoading && !retried){
						retried = true;
						LoadManager.instance.load(autoLoading.url.split('?')[0], function():void{
							trace('retry loaded:'+autoLoading.name);
							retried = false;
							loaded++;
							autoLoad();
						}, URLUtil.getCachePath(autoLoading.url));
					}else if(autoLoading){
						retried = false;
						PAlert.show('媒资 '+autoLoading.name+' 加载出错，请确保网络连接正常，如果仍有问题请联系我们','加载失败',null, function():void{
							autoLoad();
							AA.say('reload');
						}, PAlert.CONFIRM, '再试一次', '', true);
					}
				});

				PreloaderMessenger.listen(PreloaderMessenger.SHOW_APP, function():void{
					TweenLite.delayedCall(0.5, autoLogin);
				});

				initMore();

				listPanel.addEventListener(ODataEvent.ODATA, playBroHandler);
				
				autoPlayTimer = new Timer(1000);
				autoPlayTimer.addEventListener(TimerEvent.TIMER, onTimer);
			}
			
			private var autoPlayTimer:Timer;

			private function autoLogin():void
			{
				var so:SharedObject = SharedObject.getLocal('yp');
				if(so.data.username && so.data.password){
					if(api.online){
						api.login(so.data.username, so.data.password, function(vo:ResultVO):void{
							if(vo.status){
								so.data.id = ServiceBase.id;
								so.data.broadcasts = vo.results.broadcasts;
								so.flush();
							}
							else{
								if(vo.errCode){
									api.online = false;
									api.getMenuList();
								}else{
									var l:LoginView = new LoginView();
									PopupBoxManager.popup(l);
								}
							}
						});
					}else{
						api.getMenuList();
					}
				}else{
					if(api.online)
					{
						var l:LoginView = new LoginView();
						PopupBoxManager.popup(l);
					}else{
						PAlert.show('第一次使用需要网络连接，请联网后再试', '网络连接失败', this, function():void{
							autoLogin();
						}, PAlert.CONFIRM, '再试一次', '', true);
					}
				}
			}

			private function getPlayer():SoundPlayer
			{
				var p:SoundPlayer = new SoundPlayer(1000);
				p.autoPlay = true;
				return p;
			}

			private function updateTime():void
			{
				var n:Date = new Date();
				time = n.getHours()+' : '+n.getMinutes()+' : '+n.getSeconds();
			}

			[Bindable]
			private var time:String;

			private var brodcasting:Boolean;
			private var playingDM:Boolean;

			protected function playingHandler(event:DataEvent):void
			{
				if(brodcasting || playingDM)
					return;
				var dms:Array = api.dms;
				var pt:Number = Math.ceil(parseFloat(event.data)/1000);
				var tt:int = Math.ceil(player.soundLength/1000);
				time = randomPlay.selected ? '[随机播放] ':''; 
				time = time+'正在播放：'+song1.name;
				var value:Number = tt-pt; 
				if(value < 0)
					play();
				else if(dms){
					var now:Date = new Date();
					var min:Number;
					for each(var dm:InsertVO in dms){
						var ns:Number = now.getTime()/1000;
						if(dm.playTime.date != now.date)
							dm.playTime.date = now.date;
						var ds:Number = dm.playTime.getTime()/1000;
						value = ns-ds;
						min = min < value ? min : value;
						if(Math.abs(value) <= 1){
							playingDM = true;
							insertBroOrDM(dm);
							break;
						}
					}
					value = -min;
					if(playingDM || (value > 0 && value<60)){
						time+=' '+DateUtil.formateTime(value)+' 后将插播DM';
					}else if(song2){
						value = tt-pt; 
						time+=' '+DateUtil.formateTime(value)+' 后将播放：'+song2.name;
					}
				}
				else if(song2)
					time+=' '+DateUtil.formateTime(value)+' 后将播放：'+song2.name;
				else
					time+=' '+DateUtil.formateTime(value)+' 后将将结束今天的播放'
			}

			protected function player1PlayedHandler(event:Event):void
			{
				play();
			}

			private var song1:SongVO;
			private var song2:SongVO;

			private var player2:SoundPlayer;
			private var songs:Array;

			private function initPlayer():void
			{
				player1 = getPlayer();
				player2 = getPlayer();
				player = player1;
				player1.volume = volume/100;
				player2.volume = volume/100;
				player1.addEventListener("playing", playingHandler);
				player1.addEventListener("playComplete", player1PlayedHandler);
				API.instance.addEventListener('PLAY', function(e:Event):void{
					song1 = null;
					song2 = null;
					play();
				});
			}

			private var playingIndex:int;
			
			private function play():void
			{
				var now:Date = new Date();
				var has:Boolean;
				var vo:SongVO;
				var temp:Number;
				var nearestSong:SongVO;
				var firstSong:SongVO;
				if(!randomPlay.selected){
					if(!song1){
						for(var i:int; i<api.songs.length; i++){
							vo = api.songs[i] as SongVO;
							if(!nearestSong)
								nearestSong = vo;
							if(!firstSong)
								firstSong = vo;
							if(vo){
								if(vo.playTime.date != now.date)
									vo.playTime.date = now.date;
								var result:Number = vo.playTime.getTime()+vo.duration*1000-now.getTime();
								nearestSong = Math.abs(nearestSong.playTime.getTime()-now.getTime()) > Math.abs(vo.playTime.getTime()-now.getTime()) ? vo : nearestSong;
								if(temp){
									result-=temp;
									temp=0;
								}
								if(result >1000 && result < vo.duration*1000){
									if(vo != song1){
										vo = api.songs[i];
										playingIndex = i;
										has = true;
										if(i!= api.songs.length-1){
											for(i++;i<api.songs.length-1;i++){
												song2 = api.songs[i] as SongVO;
												if(song2)
													break;
											}
										}
										else
											song2 = null
										song1 = vo;
										break;
									}else{
										temp = result;
									}
								}
							}
						}
					}else{
						has = true;
						if(song2){
							song1 = song2;
							var index:int = api.songs.indexOf(song2);
							if(index != api.songs.length -1){
								for(index++;i<api.songs.length-1;index++){
									song2 = api.songs[index] as SongVO;
									if(song2)
										break;
								}
							}
							else
								song2 = null;
						}
					}
				}else{
					song1 = api.getRandomSong();
					if(song1)
						has = true;
					else{
						PAlert.show('抱歉，当前时段没有可随机播放的曲目，请取消随机播放或联系我们');
						randomPlay.selected=false;
						play();
						return;
					}
				}
				if(!has){
					song1 = null;
					if(player1.playing)
						player1.stop();
					if(!autoPlayTimer.running)
						autoPlayTimer.start();
					var value:Number = (nearestSong.playTime.getTime()-now.getTime())/1000;
					if(value < 0){
						firstSong.playTime.date++;
						value = (firstSong.playTime.getTime()-now.getTime())/1000;
					}
					time = '当前时段无媒资可播放 '+ DateUtil.formateTime(value) +' 后将播放 '+nearestSong.name;
				}else{
					if(autoPlayTimer.running)
						autoPlayTimer.stop();
					vo = song1;
					api.playingSong = vo;
					api.playingIndex = api.songs.indexOf(song1);
					listPanel.to(api.playingIndex);
					AA.say('play');
					time = '准备开始播放 '+vo.name;
					var path:String = FileManager.savedDir+URLUtil.getCachePath(vo.url);
					trace(path);
					var f:File = new File(path);
					now = new Date();
					var s:Number = now.getTime()-vo.playTime.getTime();
					trace(DateUtil.getHMS(vo.playTime), s, DateUtil.getHMS(now));
					if(f.exists){
						player.url = new File(FileManager.savedDir+URLUtil.getCachePath(vo.url)).url
						player.currentPosition = s;
						autoLoad();
					}else{
						LoadManager.instance.load(vo.url, function():void{
							player.url = new File(FileManager.savedDir+URLUtil.getCachePath(vo.url)).url
							player.currentPosition = s;
							autoLoad();
						}, URLUtil.getCachePath(vo.url), null, function(percent:Number):void{
							time = '第一次播放 '+vo.name+' ，请稍候，加载进度 '+Math.round(percent*100)+'%';
						});
					}
//					setTimeout(function():void{
//						soundVisualizer.setCover(vo.cover);
//					}, 1000);
				}
			}

			protected function randomPlay_changeHandler(event:Event):void
			{
//				trace(randomPlay.selected);
				if(!song1)
					play();
			}

//			protected function songList_changeHandler(event:Event):void
//			{
//				var wait:Number = 0;
//				if(panel && panel != songPanel){
//					hide(panel);
//					wait = 0.5;
//				}
//				TweenLite.delayedCall(wait, function():void{
//					if(!songPanel){
//						songPanel = new ListPanel();
//						songPanel.width = panelGroup.width;
//						songPanel.height = panelGroup.height;
//						panelGroup.addElement(songPanel);
//						panelButton[songPanel] = songList;
//					}
//
//					songList.selected ? show(songPanel) : hide(songPanel);
//				});
//			}

//			private var panel:Group;
//			private var broPanel:BroPanel;
//			private var panelButton:Dictionary = new Dictionary();
//
//			protected function broList_changeHandler(event:Event):void
//			{
//				var wait:Number = 0;
//				if(panel && panel != broPanel){
//					hide(panel);
//					wait = 0.5;
//				}
//				TweenLite.delayedCall(wait, function():void{
//					if(!broPanel)
//					{
//						broPanel = new BroPanel();
//						broPanel.width = panelGroup.width;
//						broPanel.height = panelGroup.height;
//						broPanel.addEventListener(ODataEvent.ODATA, playBroHandler);
//						panelGroup.addElement(broPanel);
//						panelButton[broPanel] = broList;
//					}
//
//					broList.selected ? show(broPanel) : hide(broPanel);
//				});
//			}

//			private function show(p:Group):void
//			{
//				p.x = panelGroup.width;
//				TweenLite.to(p, 0.5, {x:0, ease:Cubic.easeOut});
////				soundVisualizer.graphics.clear()
//				panel = p;
//			}

//			private function hide(p:Group):void
//			{
//				panelButton[p].selected = false;
//				TweenLite.to(p, 0.5, {x:panelGroup.width, ease:Cubic.easeOut});
//				panel = null;
//			}

			private var insertPanel:InsertPanel;
			private var api:API;

			protected function insertSong_changeHandler(event:Event):void
			{
				var wait:Number = 0;
//				if(panel && panel != insertPanel){
//					hide(panel);
//					wait = 0.5;
//				}
//				TweenLite.delayedCall(wait, function():void{
//					if(!insertPanel)
//					{
//						insertPanel = new InsertPanel();
//						insertPanel.width = panelGroup.width;
//						insertPanel.height = panelGroup.height;
//						insertPanel.addEventListener(ODataEvent.ODATA, playBroHandler);
//						panelGroup.addElement(insertPanel);
//						panelButton[insertPanel] = insertSong;
//					}
//
//					insertSong.selected ? show(insertPanel) : hide(insertPanel);
//				});
			}

			protected function playBroHandler(event:ODataEvent):void
			{
				if(brodcasting)
					return;
				brodcasting = true;
				insertBroOrDM(event.data as InsertVO);
			}

			public var loaded:int=0;
			public var autoLoading:Object;

			private function autoLoad():void
			{
				var songs:Array = api.songs;
				if(!songs)
					return
				var vo:Object;
				var file:File;
				if(playingIndex < songs.length-1){
					playingIndex++;
					vo = songs[playingIndex];
					file = new File(FileManager.savedDir+URLUtil.getCachePath(vo.url));
					if(!file.exists){
						autoLoading = vo;
						LoadManager.instance.load(vo.url, function():void{
							trace('loaded:'+vo.name);
							loaded++;
							autoLoad();
						}, URLUtil.getCachePath(vo.url));
					}else{
						loaded++;
						autoLoad();
					}
				}else if (loaded < songs.length){
					playingIndex=0;
					autoLoad();
				}else{
					trace('all loaded');
				}
//				for(var i:int; i<api.songs.length; i++){
//					vo = api.songs[i];
//					song1 = vo;
//					if(i!= api.songs.length-1)
//						song2 = api.songs[i+1];
//					if(vo.playTime.getTime()>now.getTime()){
//						vo = api.songs[i!=0 ? i-1 : 0];
//						playingIndex = i;
//						has = true;
//						break;
//					}
//				}
			}

			protected function more_clickHandler(event:MouseEvent):void
			{
				moreMenu.display(this.stage, event.stageX, event.stageY);
			}

			private var moreMenu:NativeMenu
			private const CLOSE:String = 'CLOSE';
			private const CONTACT_US:String = 'CONTACT_US';
			private const ABOUT_US:String = 'ABOUT_US';
			private const CLEAR_CACHE:String = 'CLEAR_CACHE';
			private const FEEDBACK:String = 'FEEDBACK';

			private function initMore():void
			{
				moreMenu = new NativeMenu();
				moreMenu.addItem(getNMI('联系我们', CONTACT_US));
//				moreMenu.addItem(getNMI('意见反馈', FEEDBACK));
//				moreMenu.addItem(getNMI('清空缓存', CLEAR_CACHE));
//				moreMenu.addItem(getNMI('','', true));
//				moreMenu.addItem(getNMI('关于我们', ABOUT_US));
//				moreMenu.addItem(getNMI('关闭程序', CLOSE));
			}

			private function getNMI(label:String, data:Object, isSeparator:Boolean=false):NativeMenuItem{
				var i:NativeMenuItem = new NativeMenuItem(label, isSeparator);
				i.data = data
				i.addEventListener(Event.SELECT, selectedHandler);
				return i;
			}

			protected function selectedHandler(event:Event):void
			{
				trace(event.target.data);
				switch(event.target.data)
				{
					case CLOSE:
						NativeApplication.nativeApplication.exit();
						break;
					case FEEDBACK:
					case CONTACT_US:
					case ABOUT_US:
						navigateToURL(new URLRequest('http://weibo.com/u/2662098313'));
						break;
					case CLEAR_CACHE:
						var f:File = File.applicationStorageDirectory.resolvePath('assets');
						if(f.exists){
							f.deleteDirectoryAsync(true);
							f.addEventListener(Event.COMPLETE, function(e:Event):void{
								PAlert.show('您的缓存已清空，请放心使用');						
							})
						}
						break;
				}
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
				PAlert.show('退出后将停止公播', '退出播放', null, function(value:String):void{
					if(value == PAlert.YES)
						NativeApplication.nativeApplication.exit();
				},PAlert.YESNO);
			}

			protected function button2_clickHandler(event:MouseEvent):void
			{
				NativeApplication.nativeApplication.activeWindow.minimize()
			}
			
			private var updating:Boolean;

			protected function button3_clickHandler(event:MouseEvent):void
			{
				if(this.updating)
					return;
				updateButton.label = '下载更新';
				updating = true;
				api.updater.addEventListener(ProgressEvent.PROGRESS, function(e:ProgressEvent):void{
					var percent:Number = e.bytesLoaded/e.bytesTotal;
					percent = Math.round(percent*100);
					updateButton.label = '更新进度'+percent+'%';
				});
//				api.update();
			}
			
			private function insertBroOrDM(data:InsertVO):void
			{
				var bro:InsertVO = data;
				var naiveURL:String = FileManager.savedDir+URLUtil.getCachePath(bro.url);
				var url:String = new File(naiveURL).url;
				time = data.playTime ? '开始插播DM：' : '开始广播：';
				time += bro.name;
				if(bro.repeat){
					time += ' '+bro.repeat +' 次';
				}else{
					time += ' 1 次';
				}
				if(bro.interval){
					time += ' 每次间隔 '+bro.repeat+ ' 秒';
				}
				player1.muted = true;
				setTimeout(function():void{
					if(bro.repeat){
						player2.repeat = true;
						player2.repeatTimes = bro.repeat;
						player2.repeatInterval = bro.interval;
						player2.addEventListener("playRepeatComplete", function(e:Event):void{
							player1.muted = false;
							brodcasting = false;
							playingDM = false;
						});
					}else{
						player2.repeat = false;
						player2.addEventListener("playComplete", function(e:Event):void{
							player1.muted = false;
							brodcasting = false;
							playingDM = false;
						});
					}
					player2.url = url;
				}, 800)				
			}
			
			protected function onTimer(event:TimerEvent):void
			{
				if(!song1)
					play();
			}
			
		]]>
	</fx:Script>

	<mx:UIComponent id="sv" mouseChildren="false" y="{info.y}" mouseEnabled="false"/>
	<s:BitmapImage id="background" source="@Embed('/assets/panelBG.jpg')"
				   width="100%" height="100%"
				   fillMode="repeat"/>
	<s:VGroup id="panelGroup" clipAndEnableScrolling="true">
		<views:ListPanel id="listPanel" width="100%" height="100%" 
						 />
	</s:VGroup>

	<s:Group height="57" width="100%">
		<s:Group id="info" y="{topBG.height}" width="100%">
			<s:BitmapImage x="1" source="@Embed('/assets/trasBG.png')"/>
			<s:Label text="{time}" color="0xd9dee3" fontSize="14" left="20" width="615" verticalCenter="0"/>
			<s:HGroup right="20" verticalCenter="0" verticalAlign="middle">
				<!--<s:ToggleButton skinClass="skins.ListButton"
								buttonMode="true"
								change="songList_changeHandler(event)"
								id="songList"
								toolTip="{songList.selected ? '关闭播放列表' : '播放列表'}"
								/>
				<s:ToggleButton skinClass="skins.BroButton"
								buttonMode="true"
								id="broList"
								change="broList_changeHandler(event)"
								toolTip="{broList.selected ? '关闭广播' : '手动广播'}"
								/>
				<s:ToggleButton skinClass="skins.InsertButton"
								buttonMode="true"
								change="insertSong_changeHandler(event)"
								id="insertSong"
								toolTip="{insertSong.selected ? '关闭定时插播' : '定时插播'}"
								/>
						  />-->
				<s:ToggleButton id="randomPlay" change="randomPlay_changeHandler(event)" 
								mouseDown="event.stopImmediatePropagation()"
								buttonMode="true"
								skinClass="skins.RandomButton"
								toolTip="{randomPlay.selected ? '取消随机播放' : '开启随机播放'}"
								/>
				<s:Button id="more" mouseDown="event.stopImmediatePropagation()"
						  buttonMode="true"
						  skinClass="skins.MoreButtonSkin"
						  toolTip="更多"
						  click="more_clickHandler(event)"/>
			</s:HGroup>
		</s:Group>
		<s:BitmapImage horizontalCenter="0" source="@Embed('/assets/topBG.png')" id="topBG">
			<s:filters>
				<s:DropShadowFilter angle="90" blurX="3" blurY="3" alpha=".1" />
			</s:filters>
		</s:BitmapImage>
		<s:HGroup width="100%" height="100%" verticalAlign="middle" paddingLeft="20" paddingRight="20">
			<s:BitmapImage source="@Embed('/assets/icon/32.png')" left="20" verticalCenter="0"/>
			<!--<s:Label text="乐府时代播放器" fontSize="22" color="0xffffff" left="20" verticalCenter="0"/>-->
			<s:VGroup horizontalAlign="center" paddingLeft="20">
				<s:Label text="音量调节"/>
				<s:HGroup verticalAlign="middle" verticalCenter="0" gap="13">
					<s:Image buttonMode="true" toolTip="静音" click="toVolume(0)" source="@Embed('/assets/v1.png')"/>
					<s:Group height="12" id="volumeGroup" width="102" mouseDown="volumeGroup_mouseDownHandler(event)">
						<s:BitmapImage id="track" source="@Embed('/assets/trackBG.png')" y="-2"/>		
						<s:BitmapImage source="@Embed('/assets/activeBG.png')"
									   width="100%"
									   mask="{m}"
									   y="-2"
									   />
						<s:Group width="{volume*track.width/100}" id="m" height="12">
							<s:Rect width="100%" height="12">
								<s:fill>
									<s:SolidColor color="0"/>
								</s:fill>
							</s:Rect>
						</s:Group>
						<s:Group width="0" height="0" buttonMode="true" id="thumb"
								 x="{volume*track.width/100}"
								 verticalCenter="0"
								 mouseDown="thumb_mouseDownHandler(event)">
							<s:BitmapImage source="@Embed('/assets/thumbVbtn.png')" x="-12" y="-16"/>
						</s:Group>
					</s:Group>
					<s:Image buttonMode="true" toolTip="最大音" click="toVolume(100)" source="@Embed('/assets/v2.png')"/>
				</s:HGroup>
			</s:VGroup>
			<s:Spacer width="100%"/>
			<s:Button fontSize="14" id="updateButton" color="0x191C1E" skinClass="skins.buttons.DefaultButtonSkin" visible="{API.instance.updatable}" click="button3_clickHandler(event)" label="更新"/>
			<s:Button fontSize="14" color="0x191C1E" skinClass="skins.buttons.DefaultButtonSkin" click="button2_clickHandler(event)" label="缩小"/>
			<s:Button fontSize="14" skinClass="skins.buttons.WarningButtonSkin" click="button1_clickHandler(event)" label="退出"/>
		</s:HGroup>
	</s:Group>

	
	
</s:Group>
