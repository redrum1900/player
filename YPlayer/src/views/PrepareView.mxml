<?xml version="1.0" encoding="utf-8"?>
<components:PopupBox xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark"
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 xmlns:components="com.pamakids.components.*"
					 title="准备媒资"
					 disableClose="true"
					 minWidth="380"
					 creationComplete="popupbox1_creationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.pamakids.components.PAlert;
			import com.pamakids.events.ODataEvent;
			import com.pamakids.manager.FileManager;
			import com.pamakids.manager.LoadManager;
			import com.pamakids.utils.URLUtil;

			import flash.utils.getTimer;

			import mx.events.FlexEvent;

			import controllers.API;
			private var api:API;
			[Bindable]
			public var info:String;

			private var retried:Boolean;
			public var dms:Array;
			public var menuID:String;
			public var label:String;
			private var retryTimes:int;

			protected function popupbox1_creationCompleteHandler(event:FlexEvent):void
			{
				api=API.instance;

				LoadManager.instance.addEventListener(IOErrorEvent.IO_ERROR, autoLoadErrorHandler);

				var size:Number=0;
				var avaibleSize:Number=Math.round(new File(FileManager.savedDir).spaceAvailable / 1024);
				if (!songs)
					songs=[];
				if (dms)
				{
					for each (var dm:Object in dms)
					{
						if (songs.indexOf(dm) == -1)
							songs.unshift(dm);
					}
				}
				if (broadcasts)
				{
					for each (var bro:Object in broadcasts)
					{
						if (bro.type != 1)
							songs.push(bro);
					}
				}
				for each (var o:Object in songs)
				{
					trace(o.size);
					if (o.size)
						size+=o.size;
				}
				size=size / 1024
				trace(size, avaibleSize);
				if (avaibleSize - size < 512000)
				{
					PAlert.show('您的磁盘空间仅剩 ' + Math.round(avaibleSize / 1024) + ' M了，请注意扩容');
				}
				length=songs.length;

				titleS='更新 ' + label + ' 共计 ' + Math.round(size / 1024) + ' M'

				autoLoad();
			}

			public var dmMenu:String;

			private function allLoaded():void
			{
				var data:Object=null;
				if ((startLoad && (menuID || dmMenu)) || !api.hasCached(menuID) || !api.hasCached(dmMenu))
				{
					data={};
					data.duration=(getTimer() - startLoad) / 1000;
					data.songMenu=menuID;
					data.dmMenu=dmMenu;
				}
				LoadManager.instance.removeEventListener(IOErrorEvent.IO_ERROR, autoLoadErrorHandler);
				dispatchEvent(new ODataEvent(data, 'loaded'));
			}

			private var length:Number;

			private function updatePVInfo(percent:Number=0):void
			{
				if (length)
					info='媒资初始化进度：' + loaded + '/' + length + ' 当前进度：' + Math.round(percent * 100) + '%';
			}

			private var startLoad:Number=0;

			private function getCachePath(vo:Object):String
			{
				return api.isTool ? 'cache/' + vo.name : URLUtil.getCachePath(vo.url)
			}

			private var loadingFile:File;

			private function autoLoad():void
			{
				if (isAutoloading)
					return;
				isAutoloading=true;
				updatePVInfo();
				var vo:Object;
				var file:File;
				if (loaded <= songs.length - 1)
				{
					vo=songs[loaded];
					var s:String=FileManager.savedDir + URLUtil.getCachePath(vo.url);
					file=new File(s);

					if (!file.exists)
					{
						if (!startLoad)
							startLoad=getTimer();
						autoLoading=vo;
						LoadManager.instance.load(vo.url, function():void
						{
							trace('loaded:' + vo.name);
							loaded++;
							isAutoloading=false;
							autoLoad();
						}, URLUtil.getCachePath(vo.url), null, loadingHandler);
					}
					else
					{
						isAutoloading=false;
						loaded++;
						autoLoad();
					}
				}
				else
				{
					TweenLite.delayedCall(0.1, function():void
					{
						close();
						LoadManager.instance.allLoadingHandler=null
						allLoaded();
					});
				}
			}

			private function loadingHandler(value:Number):void
			{
				updatePVInfo(value);
			}

			public var loaded:int=0;
			public var autoLoading:Object;
			private var isAutoloading:Boolean;
			public var songs:Array;
			public var broadcasts:Array;

			[Bindable]
			private var titleS:String;

			protected function autoLoadErrorHandler(event:Event):void
			{
				if (api.local)
				{
					PAlert.show('本地加载媒资失败：' + event.toString());
					return;
				}
				if (autoLoading && !retried)
				{
					retried=true;
					LoadManager.instance.load(autoLoading.url.split('?')[0], function():void
					{
						Log.Trace('retry loaded:' + autoLoading.name);
						retried=false;
						loadingFile=new File(FileManager.savedDir + getCachePath(autoLoading));
					}, getCachePath(autoLoading), null, loadingHandler);
				}
				else if (autoLoading)
				{
					retried=false;
					retryTimes++;
					isAutoloading=false
					if (retryTimes <= 10)
					{
						TweenLite.killDelayedCallsTo(autoLoad);
						TweenLite.delayedCall(3, autoLoad);
					}
					else
					{
						retryTimes=0;
						PAlert.show('媒资 ' + autoLoading.name + ' 加载出错，请确保网络连接正常，如果仍有问题请联系我们', '加载失败', null, function():void
						{
							autoLoad();
						}, PAlert.CONFIRM, '再试一次', '', true);
					}
				}
			}
		]]>
	</fx:Script>

	<components:layout>
		<s:VerticalLayout horizontalAlign="center"
						  paddingLeft="40"
						  paddingRight="40"
						  paddingBottom="20"
						  paddingTop="20"
						  gap="18"/>
	</components:layout>
	<s:Label text="{titleS}"
			 fontSize="18"/>
	<s:Label text="{info}"
			 fontSize="14"/>
</components:PopupBox>
