<?xml version="1.0" encoding="utf-8"?>
<components:PopupBox xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark"
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 xmlns:components="com.pamakids.components.*"
					 title="定制广播"
					 width="320"
					 disableClose="true"
					 creationComplete="popupbox1_creationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.pamakids.components.PAlert;
			import com.pamakids.components.controls.SoundPlayer;
			import com.pamakids.manager.FileManager;
			import com.pamakids.manager.SoundManager;
			import com.pamakids.utils.DateUtil;
			import com.pamakids.utils.FileHelper;

			import mx.events.FlexEvent;
			import mx.utils.UIDUtil;

			import controllers.API;

			import fr.kikko.lab.ShineMP3Encoder;

			import models.InsertVO;

			import org.as3wavsound.WavSound;
			import org.bytearray.micrecorder.MicRecorder;
			import org.bytearray.micrecorder.encoder.WaveEncoder;
			import org.bytearray.micrecorder.events.RecordingEvent;

			import skins.buttons.DangerButtonSkin;
			import skins.buttons.SuccesButtonSkin;

			[Bindable]
			public function get vo():InsertVO
			{
				return _vo;
			}

			public function set vo(value:InsertVO):void
			{
				_vo=value;
				check();
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
			}

			private var bros:Array;

			private var _vo:InsertVO;

			private var timer:Timer;
			private var mic:Microphone;
			private var waveEncoder:WaveEncoder=new WaveEncoder();
			private var recorder:MicRecorder=new MicRecorder(waveEncoder);

			private var timeLimit:Number;

			protected function popupbox1_creationCompleteHandler(event:FlexEvent):void
			{
				timeLimit=API.instance.getRecordLimit();
				mic=Microphone.getMicrophone();
				mic.setSilenceLevel(100);
				mic.gain=0;
				mic.rate=44;
				mic.setLoopBack(false);
				mic.setUseEchoSuppression(true);
				Security.showSettings('2');
				recorder.addEventListener("recording", recordingHandler);
				recorder.addEventListener(Event.COMPLETE, recordCompletedHandler);
				timer=new Timer(1000);
				timer.addEventListener(TimerEvent.TIMER, onTimer);
				check();
			}

			private var mp3Encoder:ShineMP3Encoder;
			[Bindable]
			private var saving:Boolean;

			protected function confirm_clickHandler(event:MouseEvent):void
			{
				if (recorded)
				{
					toAdd.label='保存中';
					saving=true;
					recorder.output.position=0;
					mp3Encoder=new ShineMP3Encoder(recorder.output);
					mp3Encoder.addEventListener(ProgressEvent.PROGRESS, mp3EncodeProgress);
					mp3Encoder.addEventListener(Event.COMPLETE, mp3EncodedHandler);
					mp3Encoder.start();
				}
				else if (selectedFile)
				{
					var nurl:String='recorded/' + selectedFile.name;
					var path:String=FileManager.savedDir + nurl;
					selectedFile.copyTo(new File(path), true);
					vo.url=nurl;
					vo.name=broName.text;
					close();
				}
				else
				{
					vo.name=broName.text;
					close();
				}
			}

			/**
			 * 开始录制音频文件
			 */
			protected function ctl_clickHandler(event:MouseEvent):void
			{
				if (!mic)
				{
					PAlert.show('您的设备没有麦克风，请检查后再试');
					return;
				}
				playInfo.visible=true;
				if (!recording)
				{
					recording=true;
					recorder.record();
					ctl.label='停止录音';
					info='已录制：00:00';
					ctl.setStyle('skinClass', DangerButtonSkin);
					timer.reset();
					timer.start();
					Log.info('点击开始录制按钮');
				}
				else
				{
					stopRecord();
				}
			}

			[Bindable]
			private var info:String='已录制：00:00';

			protected function play_clickHandler(event:MouseEvent):void
			{
				if (!playing)
				{
					PAlert.show('请注意，试听时会直接将录制的声音播放出来', '提示', null, function(value:String):void
					{
						if (value == PAlert.YES)
						{
							play.label='停止';
							playing=true;
							if (recorded)
							{
								recorded.play();
							}
							else if (vo.url)
							{
								SoundManager.instance.playUrl(vo.url);
							}
							TweenLite.delayedCall(timer.currentCount, function():void
							{
								play.label='试听';
								playing=false;
							});
							Log.info('点击试听按钮');
						}
					}, PAlert.YESNO);
				}
				else
				{
					playing=false;
					play.label='试听';
					if (recorded)
					{
						recorded.stop();
					}
					else if (vo.url)
					{
						SoundManager.instance.stopAll();
					}
				}
			}

			protected function recordingHandler(event:org.bytearray.micrecorder.events.RecordingEvent):void
			{

			}

			[Bindable]
			private var playing:Boolean;

			[Bindable]
			private var recording:Boolean;

			private var recorded:WavSound;

			protected function recordCompletedHandler(event:Event):void
			{
				recording=false;
				recorded=new WavSound(recorder.output);
				play.visible=true;
			}

			protected function onTimer(event:TimerEvent):void
			{
				if (timer.currentCount == timeLimit)
					stopRecord();
				info='已录制：' + DateUtil.formateTime(timer.currentCount);
			}

			private function check():void
			{
				//				if (vo.url && play)
				//				{
				//					play.visible=true;
				//				}
			}

			protected function cancel_clickHandler(event:MouseEvent):void
			{
				close();
			}

			override protected function close():void
			{
				super.close();
				clearSP();
			}

			/**
			 * 保存进度
			 *
			 */
			public function mp3EncodeProgress(e:ProgressEvent):void
			{
				toAdd.label='保存中' + e.bytesLoaded + '%';
			}

			/**
			 * MP3转换完毕保存路径
			 *
			 */
			protected function mp3EncodedHandler(event:Event):void
			{
				try
				{
					var nurl:String='recorded/' + UIDUtil.createUID() + '.mp3';
					FileManager.saveFile(nurl, mp3Encoder.mp3Data);
					vo.url=nurl;
					vo.name=broName.text;
					close();
				}
				catch (error:Error)
				{
					PAlert.show('保存失败：' + error);
				}
			}

			/**
			 * 选择需要上传的广播饮品文件
			 */
			protected function chooseFile_clickHandler(event:MouseEvent):void
			{
				FileHelper.browse(File.documentsDirectory.nativePath, 1, selectedHandler, '选择广播声音文件', [new FileFilter('广播声音文件', '*.mp3')]);
			}

			[Bindable]
			private var selectedFile:File;

			private var sp:SoundPlayer;

			private function selectedHandler(f:File):void
			{
				if (!sp)
				{
					sp=new SoundPlayer();
					sp.muted=true;
					sp.autoPlay=true;
					sp.addEventListener("playing", playingHandler);
				}
				sp.url=f.url;
				selectedFile=f;
				broName.text=f.name.replace('.mp3', '');
				Log.info('点击选择录制好的mp3文件');
			}

			private function stopRecord():void
			{
				timer.stop();
				recording=false;
				recorder.stop();
				mic.setLoopBack(false);
				ctl.label='开始录音';
				ctl.setStyle('skinClass', SuccesButtonSkin);
			}

			protected function playingHandler(event:DataEvent):void
			{
				if (sp && sp.soundLength / 1000 > 180)
				{
					selectedFile=null;
					PAlert.show('选择的广播文件不可超出' + (timeLimit / 60) + '分钟，请重新选择');
				}
				clearSP();
			}

			private function clearSP():void
			{
				if (sp)
				{
					sp.stop();
					sp=null;
				}
			}

			protected function clear_clickHandler(event:MouseEvent):void
			{
				Log.info('点击清除关闭按钮');
				vo.url='';
				close();
			}
		]]>
	</fx:Script>

	<components:layout>
		<s:VerticalLayout paddingLeft="20"
						  paddingRight="20"
						  paddingBottom="20"
						  paddingTop="30"
						  gap="10"/>
	</components:layout>
	<s:VGroup id="bg"
			  fontSize="14">
		<s:Label text="选择录制好的mp3文件"
				 color="0x777777"
				 width="100%"/>
		<s:HGroup verticalAlign="middle">
			<s:Button id="chooseFile"
					  label="选择文件"
					  enabled="{!recording}"
					  click="chooseFile_clickHandler(event)"
					  buttonMode="true"
					  skinClass="skins.buttons.PrimaryButtonSkin"/>
			<s:Label text="{selectedFile.name}"
					 color="0x777777"/>
		</s:HGroup>
		<s:Spacer height="18"/>
		<s:Label text="或直接录制（最长不超过6分钟）"
				 color="0x777777"
				 width="100%"/>
		<s:HGroup verticalAlign="middle">
			<s:Button id="ctl"
					  label="开始录音"
					  enabled="{!playing}"
					  click="ctl_clickHandler(event)"
					  buttonMode="true"
					  skinClass="skins.buttons.SuccesButtonSkin"/>
			<s:Label text="{info}"
					 id="playInfo"
					 visible="false"
					 width="100%"/>
			<s:Button id="play"
					  enabled="{!recording}"
					  skinClass="skins.buttons.DefaultButtonSkin"
					  visible="false"
					  label="试听"
					  click="play_clickHandler(event)"/>
		</s:HGroup>
		<s:Spacer height="18"/>
		<s:HGroup verticalAlign="middle"
				  width="100%">
			<s:Label text="按钮名称"
					 color="0x30373e"/>
			<s:TextInput color="0x30373e"
						 text="{vo.name}"
						 skinClass="skins.textinput.DefaultTextInputSkin"
						 id="broName"
						 prompt="请输入广播按钮名称"/>
		</s:HGroup>
		<s:Spacer height="18"/>
		<s:HGroup width="100%">
			<s:Button id="clear"
					  color="0x30373e"
					  enabled="{vo.url}"
					  click="clear_clickHandler(event)"
					  skinClass="skins.buttons.WarningButtonSkin"
					  label="清除并关闭"/>
			<s:Button id="toAdd"
					  color="0x30373e"
					  width="97"
					  enabled="{!saving &amp;&amp; !playing &amp;&amp; !recording}"
					  click="confirm_clickHandler(event)"
					  skinClass="skins.buttons.PrimaryButtonSkin"
					  label="确认"/>
			<s:Button id="cancel"
					  enabled="{!saving &amp;&amp; !playing &amp;&amp; !recording}"
					  color="0x30373e"
					  click="cancel_clickHandler(event)"
					  skinClass="skins.buttons.DefaultButtonSkin"
					  label="取消"/>
		</s:HGroup>
	</s:VGroup>
</components:PopupBox>
