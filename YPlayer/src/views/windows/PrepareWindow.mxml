<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  creationComplete="popupbox1_creationCompleteHandler(event)"
		  systemChrome="none"
		  showStatusBar="false"
		  xmlns:components="com.pamakids.components.*">

	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.pamakids.components.PAlert;
			import com.pamakids.events.ODataEvent;
			import com.pamakids.manager.FileManager;
			import com.pamakids.manager.LoadManager;
			import com.pamakids.services.QNService;
			import com.pamakids.utils.URLUtil;

			import flash.utils.getTimer;

			import mx.events.FlexEvent;

			import controllers.API;

			import models.LogVO;
			private var api:API;
			[Bindable]
			public var info:String;

			private var retried:Boolean;
			public var dms:Array;
			public var menuID:String;
			public var label:String;
			private var retryTimes:int;

			protected function popupbox1_creationCompleteHandler(event:FlexEvent):void
			{
				api=API.instance;

				LoadManager.instance.addEventListener(IOErrorEvent.IO_ERROR, function(e:Event):void
				{
					if (api.local)
					{
						PAlert.show('本地加载媒资失败：' + e.toString());
						return;
					}
					if (autoLoading && !retried)
					{
						retried=true;
						LoadManager.instance.load(autoLoading.url.split('?')[0], function():void
						{
							trace('retry loaded:' + autoLoading.name);
							retried=false;
							isAutoloading=false;
							loaded++;
							autoLoad();
						}, URLUtil.getCachePath(autoLoading.url), null, loadingHandler);
					}
					else if (autoLoading)
					{
						retried=false;
						retryTimes++;
						if (retryTimes <= 10)
						{
							isAutoloading=false
							TweenLite.killDelayedCallsTo(autoLoad);
							TweenLite.delayedCall(3, autoLoad);
						}
						else
						{
							PAlert.show('媒资 ' + autoLoading.name + ' 加载出错，请确保网络连接正常，如果仍有问题请联系我们', '加载失败', null, function():void
							{
								autoLoad();
							}, PAlert.CONFIRM, '再试一次', '', true);
						}
					}
				});

				var size:Number=0;
				var avaibleSize:Number=Math.round(new File(FileManager.savedDir).spaceAvailable / 1024);
				if (!songs)
					songs=[];
				if (dms)
				{
					for each (var dm:Object in dms)
					{
						if (songs.indexOf(dm) == -1)
							songs.unshift(dm);
					}
				}
				if (broadcasts)
				{
					for each (var bro:Object in broadcasts)
					{
						if (bro.type != 1)
							songs.push(bro);
					}
				}
				for each (var o:Object in songs)
				{
					trace(o.size);
					if (o.size)
						size+=o.size;
				}
				size=size / 1024
				trace(size, avaibleSize);
				if (avaibleSize - size < 512000)
				{
					PAlert.show('您的磁盘空间仅剩 ' + Math.round(avaibleSize / 1024) + ' M了，请注意扩容');
					api.recordLog(new LogVO(LogVO.WARNING, Math.round(avaibleSize / 1024) + '', '磁盘空间预警'));
				}
				length=songs.length;
				if (!label)
				{
					label='更新广播';
				}

				titleS='更新 ' + label + ' 共计 ' + Math.round(size / 1024) + ' M'

				autoLoad();

//				stage.addEventListener(MouseEvent.MOUSE_DOWN, dd);
			}

			private function get so():SharedObject
			{
				return SharedObject.getLocal('yp');
			}

			public var dmMenu:String;

			private function allLoaded():void
			{
				var data:Object=null;
				if ((startLoad && (menuID || dmMenu)) || (menuID && !api.hasCached(menuID)) || (dmMenu && !api.hasCached(dmMenu)))
				{
					data={};
					data.duration=(getTimer() - startLoad) / 1000;
					if (this.haveStoredTime)
						data.duration+=this.haveStoredTime;
					so.data.duration=0;
					data.songMenu=menuID;
					data.dmMenu=dmMenu;
				}
				dispatchEvent(new ODataEvent(data, 'loaded'));
			}

			private var length:Number;

			private function updatePVInfo(percent:Number=0):void
			{
				if (length)
					info='媒资初始化进度：' + loaded + '/' + length + ' 当前进度：' + Math.round(percent * 100) + '%';
			}

			private var startLoad:Number=0;
			private var recordTimer:Timer=new Timer(1000);

			private function autoLoad():void
			{
				if (isAutoloading)
					return;
				isAutoloading=true;
				updatePVInfo();
				var vo:Object;
				var file:File;
				if (loaded <= songs.length - 1)
				{
					vo=songs[loaded];
					if (vo.url.indexOf('http') == -1)
						vo.url=QNService.HOST + vo.url;
					var s:String=FileManager.savedDir + URLUtil.getCachePath(vo.url);
					file=new File(s);

					if (!file.exists)
					{
						if (!startLoad)
							starRecord();
						autoLoading=vo;
						LoadManager.instance.load(vo.url, function():void
						{
							trace('loaded:' + vo.name);
							loaded++;
							isAutoloading=false;
							autoLoad();
						}, URLUtil.getCachePath(vo.url), null, loadingHandler);
					}
					else
					{
						isAutoloading=false;
						loaded++;
						autoLoad();
					}
				}
				else
				{
					var pw:PrepareWindow=this;
//					TweenLite.delayedCall(0.1, function():void
//					{
					trace('closed', pw.closed);
					pw.close();
					trace('closed', pw.closed);
					LoadManager.instance.allLoadingHandler=null
					allLoaded();
//					});
				}
			}

			private function loadingHandler(value:Number):void
			{
				updatePVInfo(value);
			}

			public var loaded:int=0;
			public var autoLoading:Object;
			private var isAutoloading:Boolean;
			public var songs:Array;
			public var broadcasts:Array;

			[Bindable]
			private var titleS:String;

			protected function vc_updateCompleteHandler(event:FlexEvent):void
			{
				if (this.nativeWindow.width != vc.width || this.nativeWindow.height != vc.height)
				{
					this.nativeWindow.width=vc.width;
					this.nativeWindow.height=vc.height;
					this.nativeWindow.orderToFront();
					postion();
				}
			}

			private function postion():void
			{
				this.nativeWindow.x=(Capabilities.screenResolutionX - nativeWindow.width) / 2;
				this.nativeWindow.y=(Capabilities.screenResolutionY - nativeWindow.height) / 2;
			}

			protected function group1_mouseDownHandler(event:MouseEvent):void
			{
				this.nativeWindow.startMove();
			}

			private var haveStoredTime:Number;

			private function starRecord():void
			{
				if (so.data.duration)
					haveStoredTime=so.data.duration;
				startLoad=getTimer();
				recordTimer.addEventListener(TimerEvent.TIMER, function(e:TimerEvent):void
				{
					so.data.duration=recordTimer.currentCount;
					so.flush();
				});
				recordTimer.start();
			}
		]]>
	</fx:Script>

	<components:PopupBox title="更新媒资"
						 disableClose="true"
						 updateComplete="vc_updateCompleteHandler(event)"
						 id="vc">
		<s:VGroup horizontalAlign="center"
				  paddingLeft="40"
				  paddingRight="40"
				  paddingBottom="20"
				  paddingTop="20"
				  gap="18">
			<s:Label text="{titleS}"
					 fontSize="18"/>
			<s:Label text="{info}"
					 fontSize="14"/>
		</s:VGroup>
	</components:PopupBox>

	<s:Group width="100%"
			 height="100%"
			 alpha="0"
			 mouseDown="group1_mouseDownHandler(event)">
		<s:Rect width="100%"
				height="100%">
			<s:fill>
				<s:SolidColor/>
			</s:fill>
		</s:Rect>
	</s:Group>


</s:Window>
