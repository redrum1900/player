<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 xmlns:layouts="com.youli.layouts.*"
		 creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.pamakids.components.PAlert;
			import com.pamakids.events.ODataEvent;
			import com.pamakids.manager.PopupManager;
			import com.pamakids.models.ResultVO;
			import com.pamakids.utils.DateUtil;

			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;

			import spark.components.Alert;
			import spark.components.Button;

			import controllers.API;

			import models.InsertVO;

			import org.osmf.events.TimeEvent;

			import skins.buttons.DangerButtonSkin;
			import skins.buttons.PrimaryButtonSkin;
			import skins.buttons.SuccesButtonSkin;
			import skins.buttons.WarningButtonSkin;

			public var api:API;
			public var bros:Array;
			private var i:int=0;
			private var btnDic:Dictionary;
			private var dic:Dictionary=new Dictionary();
			private var createTime:int=1;
			private var conStatus:Boolean=false;

			public var conTimer:Timer;

			public var sb:Boolean=false;
			public var pb:Boolean=false;

			protected function init(event:FlexEvent):void
			{
				api=API.instance;
				i=0;
				btnDic=new Dictionary();
				buttonsGroup.removeAllElements();
				createButtons();

				conTimer=new Timer(1000);
				conTimer.addEventListener(TimerEvent.TIMER, conAction);
			}

			public function getPlayStatus(e:TimeEvent)
			{
			}

			/**
			 * 根据广播列表生成按钮
			 */
			private function createButtons():void
			{
				if (!bros)
					return;
				if (bros && i < bros.length)
					getButton(bros[i]);
			}

			/**
			 * 生成广播按钮
			 */
			private function getButton(o:Object):Button
			{
				var b:Button;
				var newButton:Boolean=false;
				var tags:String=o.hasOwnProperty('tags') ? o.tags : '';
				if (!tags)
				{
					b=new Button();
					dic[b]=o;
					b.label=o.name;
					newButton=true;
				}
				else
				{
					b=btnDic[tags];
					if (!b)
					{
						b=new Button();
						newButton=true;
						btnDic[tags]=b;
						dic[b]=[o];
					}
					else
					{
						dic[b].push(o);
					}
				}

				if (!tags || tags.indexOf('蓝色') != -1)
					b.setStyle('skinClass', PrimaryButtonSkin);
				else if (tags.indexOf('红色') != -1)
					b.setStyle('skinClass', DangerButtonSkin);
				else if (tags.indexOf('绿色') != -1)
					b.setStyle('skinClass', SuccesButtonSkin);
				else if (tags.indexOf('黄色') != -1)
					b.setStyle('skinClass', WarningButtonSkin);
				else
					b.setStyle('skinClass', PrimaryButtonSkin);
				if (tags)
					b.label=tags.split(',')[0];

				if (newButton)
				{
					buttonsGroup.addElement(b);
					b.alpha=0;
					b.addEventListener(FlexEvent.CREATION_COMPLETE, function(e:FlexEvent):void
					{
						var dt:Number=createTime - 0.1;
						if (dt > 0)
							TweenLite.to(b, dt, {alpha: 1});
						i++;
						createButtons();
						var v:Number=b.y + b.height;
						if (scroller.height < v)
							scroller.height=v < 200 ? b.y + b.height : 200;
					});
				}
				else
				{
					i++;
					createButtons();
				}

				b.addEventListener(MouseEvent.CLICK, broHandler);

				return b;
			}

			private var alert:PAlert;

			private var playingBro:Object;

			/**
			 * 点击定制插播
			 */
			protected function broHandler(event:MouseEvent):void
			{
				var o:Object=dic[event.currentTarget];
				this.playingBro=o;

				PAlert.show('请问是否确认播放 ' + o.name, '提示', null, function(value:String):void
				{
					if (value == PAlert.YES)
						requestBro();
				}, PAlert.YESNO);
			}


			/**
			* 定时从服务器获取广播播放状态
			*
			*/
			public function conAction(e:TimerEvent):void
			{
				api.getStatus(function(vo:ResultVO):void
				{
					if (vo.status && vo.results != '')
					{
						var status:Object=JSON.parse(vo.results as String);
						if (!status.hasOwnProperty('command'))
						{
							Log.error(vo.results);
							return;
						}

						clearAlert();
						if (status.command == 2)
						{
							var arr:Array=status.data as Array;
							var s:String=arr.join('\n');
							PAlert.show(s, '项目列表', null, null, PAlert.CONFIRM);
							conTimer.stop();
						}
						else if (status.command == 3)
						{
							PAlert.show(status.data, '提示', null, null, PAlert.CONFIRM);
							conTimer.stop();
						}
						else if (status.command == 1)
						{
							if (status.status == 2)
							{
								conTimer.start();
								buttonsGroup.enabled=true;
							}
							else if (status.status == 1 && playingBro)
							{
								conTimer.stop();
								var bro:Object=status.data;
								buttonsGroup.enabled=false;
								setTimer(bro.duration);
								this.res=bro.duration as int;
								alert=PAlert.show('正在播放' + playingBro.name, '提示', null, function():void
								{
									requestStopBro();
								}, PAlert.CONFIRM, '立即停止', '', true);
							}
						}
					}
				});
			}

			var reTimer:Timer=new Timer(1000);
			var res:int;

			public function setTimer(s:int):void //duration
			{
				if (!reTimer.running)
				{
					this.res=s - 1;
					reTimer=new Timer(1000, s);
					reTimer.addEventListener(TimerEvent.TIMER, reAction);
					reTimer.addEventListener(TimerEvent.TIMER_COMPLETE, stopAction);
					reTimer.start();
				}
			}

			public function reAction(e:TimerEvent):void
			{
				if (alert && playingBro)
				{
					alert.text='正在播放' + playingBro.name + '   ' + DateUtil.formateTime(this.res) + '后停止播放';
					this.res-=1;
				}
				else
					reTimer.stop();
			}

			public function stopAction(e:TimerEvent):void
			{
//				conTimer.start();
				buttonsGroup.enabled=true;
				clearAlert();
			}

			protected function showMenu(event:MouseEvent):void
			{
				requestMenu();
			}

			private function showTip(tip:String):void
			{
				alert=PAlert.show(tip, '提示', null, null, PAlert.NORMAL, '', '', true);
			}

			protected function getInfo(event:MouseEvent):void
			{
				requestInfo();
			}

			private function requestMenu():void
			{
				api.sendCommand("showMenu", function(vo:ResultVO):void
				{
					if (vo.status)
					{
						showTip('正在处理，请稍候');
						conTimer.start();
					}
					else
					{
						clearAlert();
						PAlert.show('命令发送失败，请再试一次', '提示', null, function(value:String):void
						{
							if (value == PAlert.YES)
								requestMenu();
						}, PAlert.YESNO);
					}
				});
			}

			private function clearAlert():void
			{
				if (alert)
				{
					PopupManager.removePopup(alert);
					alert=null;
				}
			}

			private function requestInfo():void
			{
				api.sendCommand("playInfo", function(vo:ResultVO):void
				{
					if (vo.status)
					{
						showTip('正在处理，请稍候');
						conTimer.start();
					}
					else
					{
						clearAlert();
						PAlert.show('命令发送失败，请再试一次', '提示', null, function(value:String):void
						{
							if (value == PAlert.YES)
								requestInfo();
						}, PAlert.YESNO);
					}
				});
			}

			private function requestBro():void
			{
				api.sendCommand(JSON.stringify(playingBro), function(vo:ResultVO):void
				{
					if (vo.status)
					{
						showTip('正在处理，请稍候');
						conTimer.start();
					}
					else
					{
						clearAlert();
						PAlert.show('命令发送失败，请再试一次', '提示', null, function(value:String):void
						{
							if (value == PAlert.YES)
								requestBro();
						}, PAlert.YESNO);
					}
				});
			}

			private function requestStopBro():void
			{
				api.sendCommand('stop', function(vo:ResultVO):void
				{
					if (vo.status)
					{
						showTip('正在处理，请稍候');
						conTimer.start();
						playingBro=null;
						reTimer.stop();
					}
					else
					{
//						clearAlert();
						PAlert.show('命令发送失败，请再试一次', '提示', null, function(value:String):void
						{
							if (value == PAlert.YES)
								requestStopBro();
						}, PAlert.YESNO);
					}
				});
			}
		]]>
	</fx:Script>
	<s:VGroup gap="0"
			  width="100%"
			  height="100%"
			  paddingLeft="20"
			  paddingRight="20"
			  paddingTop="20"
			  paddingBottom="10">
		<s:Scroller id="scroller"
					mouseDown="event.stopImmediatePropagation()"
					width="100%"
					maxHeight="200"
					skinClass="skins.datagrid.list.ScrollSkin"
					horizontalScrollPolicy="off"
					verticalScrollPolicy="off">
			<s:HGroup width="100%"
					  height="100%">

				<s:VGroup width="70%">
					<s:Label text="广播列表"
							 fontSize="20"/>
					<s:VGroup id="buttonsGroup"
							  width="100%"
							  height="100%">
					</s:VGroup>
				</s:VGroup>
				<s:Group id="funGroup"
						 width="30%"
						 height="100%">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<s:Label text="其它功能"
							 fontSize="20"/>
					<s:Button id="getMenus"
							  label="项目列表"
							  skinClass="{PrimaryButtonSkin}"
							  click="showMenu(event)"/>
					<s:Button id="getPlayInfo"
							  label="播放状态"
							  skinClass="{PrimaryButtonSkin}"
							  click="getInfo(event)"/>
				</s:Group>
			</s:HGroup>
		</s:Scroller>
	</s:VGroup>
</s:Group>
