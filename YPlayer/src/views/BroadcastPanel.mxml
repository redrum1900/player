<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 xmlns:layouts="com.youli.layouts.*"
		 creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.pamakids.components.PAlert;
			import com.pamakids.events.ODataEvent;
			import com.pamakids.manager.PopupManager;
			import com.pamakids.models.ResultVO;

			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;

			import spark.components.Button;

			import controllers.API;

			import models.InsertVO;

			import org.osmf.events.TimeEvent;

			import skins.buttons.DangerButtonSkin;
			import skins.buttons.PrimaryButtonSkin;
			import skins.buttons.SuccesButtonSkin;
			import skins.buttons.WarningButtonSkin;

			public var api:API;
			public var bros:Array;
			private var i:int=0;
			private var btnDic:Dictionary;
			private var dic:Dictionary=new Dictionary();
			private var createTime:int=1;
			private var conStatus:Boolean=false;

			public var conTimer:Timer;

			protected function init(event:FlexEvent):void
			{
				api=API.instance;
				i=0;
				btnDic=new Dictionary();
				buttonsGroup.removeAllElements();
				createButtons();

				conTimer=new Timer(1000);
				conTimer.addEventListener(TimerEvent.TIMER, conAction);
				conTimer.start();
			}

			public function getPlayStatus(e:TimeEvent)
			{
			}

			/**
			 * 根据广播列表生成按钮
			 */
			private function createButtons():void
			{
				if (!bros)
					return;
				if (bros && i < bros.length)
					getButton(bros[i]);
			}

			/**
			 * 生成广播按钮
			 */
			private function getButton(o:Object):Button
			{
				var b:Button;
				var newButton:Boolean=false;
				var tags:String=o.hasOwnProperty('tags') ? o.tags : '';
				if (!tags)
				{
					b=new Button();
					dic[b]=o;
					b.label=o.name;
					newButton=true;
				}
				else
				{
					b=btnDic[tags];
					if (!b)
					{
						b=new Button();
						newButton=true;
						btnDic[tags]=b;
						dic[b]=[o];
					}
					else
					{
						dic[b].push(o);
					}
				}

				if (!tags || tags.indexOf('蓝色') != -1)
					b.setStyle('skinClass', PrimaryButtonSkin);
				else if (tags.indexOf('红色') != -1)
					b.setStyle('skinClass', DangerButtonSkin);
				else if (tags.indexOf('绿色') != -1)
					b.setStyle('skinClass', SuccesButtonSkin);
				else if (tags.indexOf('黄色') != -1)
					b.setStyle('skinClass', WarningButtonSkin);
				else
					b.setStyle('skinClass', PrimaryButtonSkin);
				if (tags)
					b.label=tags.split(',')[0];

				if (newButton)
				{
					buttonsGroup.addElement(b);
					b.alpha=0;
					b.addEventListener(FlexEvent.CREATION_COMPLETE, function(e:FlexEvent):void
					{
						var dt:Number=createTime - 0.1;
						if (dt > 0)
							TweenLite.to(b, dt, {alpha: 1});
						i++;
						createButtons();
						var v:Number=b.y + b.height;
						if (scroller.height < v)
							scroller.height=v < 200 ? b.y + b.height : 200;
					});
				}
				else
				{
					i++;
					createButtons();
				}

				b.addEventListener(MouseEvent.CLICK, broHandler);

				return b;
			}

			private var alert:PAlert;

			/**
			 * 点击定制插播
			 */
			protected function broHandler(event:MouseEvent):void
			{
				var o:Object=dic[event.currentTarget];
				PAlert.show('请问是否确认播放 ' + o.name, '提示', null, function(value:String):void
				{
					if (value == PAlert.YES)
					{
						o.action='bro';
						api.sendCommand(JSON.stringify(o), function(vo:ResultVO):void
						{
							Log.info(JSON.stringify(vo));
							if (!vo.status)
							{
								PAlert.show('命令发送失败');
							}
							else
							{
								alert=PAlert.show('命令发送成功，等待接收确认');
								alert.disableClose=true;
							}
						});
					}
				}, PAlert.YESNO);
			}


			/**
			* 定时从服务器获取广播播放状态
			*
			*/
			public function conAction(e:TimerEvent):void
			{
				api.getStatus(function(b:Boolean):void
				{
					if (b)
					{
						buttonsGroup.enabled=false;
						if (alert && alert.text == '命令发送成功，等待接收确认')
						{
							if (alert.isPopUp)
								PopupManager.removePopup(alert);
							alert=PAlert.show('正在播放广播');
							alert.disableClose=false;
						}
						else if (!alert || alert.text == '')
						{
							alert=PAlert.show('正在播放广播');
							alert.disableClose=false;
						}
					}
					else
					{
						buttonsGroup.enabled=true;
						if (alert && alert.text == '正在播放广播')
						{
							alert.text='';
							if (alert.isPopUp)
								PopupManager.removePopup(alert);
						}
					}

				});
			}
		]]>
	</fx:Script>
	<s:VGroup gap="0"
			  width="100%"
			  height="100%"
			  paddingLeft="20"
			  paddingRight="20"
			  paddingTop="20"
			  paddingBottom="10">
		<s:Scroller id="scroller"
					mouseDown="event.stopImmediatePropagation()"
					width="100%"
					maxHeight="200"
					skinClass="skins.datagrid.list.ScrollSkin"
					horizontalScrollPolicy="off"
					verticalScrollPolicy="off">
			<s:Group id="buttonsGroup">
				<s:layout>
					<layouts:FlowLayout id="fl"
										horizontalGap="10"
										verticalGap="10"/>
				</s:layout>

			</s:Group>
		</s:Scroller>
	</s:VGroup>
</s:Group>
