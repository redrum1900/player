<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="inited(event)"
		 xmlns:layouts="com.youli.layouts.*">

	<fx:Metadata>
		[Event(name="startRecord", type="flash.events.Event")]
		[Event(name="stopRecord", type="flash.events.Event")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.pamakids.components.PAlert;
			import com.pamakids.events.ODataEvent;
			import com.pamakids.managers.PopupBoxManager;
			import com.pamakids.utils.DateUtil;

			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;

			import spark.components.Button;
			import spark.events.IndexChangeEvent;

			import controllers.AA;
			import controllers.API;

			import models.InsertVO;
			import models.LogVO;
			import models.TimeVO;

			import skins.buttons.DangerButtonSkin;
			import skins.buttons.PrimaryButtonSkin;
			import skins.buttons.SuccesButtonSkin;
			import skins.buttons.WarningButtonSkin;

			[Bindable]
			private var label:String;

			protected function inited(event:FlexEvent):void
			{
				api=API.instance;
				api.addEventListener('PLAY', function():void
				{
					update();
				});
				AA.listen('UPDATE', function():void
				{
					update();
				});
				api.addEventListener('bros', function():void
				{
					i=0;
					loaded=0;
					bros=API.instance.broadcasts;
					buttonsGroup.removeAllElements();
					btnDic=new Dictionary();
					createButtons();
				});
			}

			public function to(index:int):void
			{
				if (index == -1)
				{
					return;
				}
				TweenLite.delayedCall(1, function():void
				{
					try
					{
						songs.ensureIndexIsVisible(index);
					}
					catch (error:Error)
					{
						trace(error);
					}
				});
			}

			private var btnDic:Dictionary;

			private function getButton(o:Object):Button
			{
				var b:Button;
				var newButton:Boolean=false;
				var tags:String=o.hasOwnProperty('tags') ? o.tags : '';
				if (!tags)
				{
					b=new Button();
					dic[b]=o;
					b.label=o.name;
					newButton=true;
				}
				else
				{
					b=btnDic[tags];
					if (!b)
					{
						b=new Button();
						newButton=true;
						btnDic[tags]=b;
						dic[b]=[o];
					}
					else
					{
						dic[b].push(o);
					}
				}

				if (o.type == InsertVO.CUSTOMIZE_BRO || o.type == InsertVO.CUSTOMIZE_INSERT)
				{
					b.setStyle('skinClass', WarningButtonSkin);
					if (o.type == InsertVO.CUSTOMIZE_BRO)
					{
						var bm:NativeMenu=new NativeMenu();
						bm.addEventListener(Event.SELECT, navHandler);
						var ni:NativeMenuItem=new NativeMenuItem('编辑');
						ni.data=o;
						bm.addItem(ni);
						b.contextMenu=bm;
					}
				}
				else
				{
					if (!tags || tags.indexOf('蓝色') != -1)
						b.setStyle('skinClass', PrimaryButtonSkin);
					else if (tags.indexOf('红色') != -1)
						b.setStyle('skinClass', DangerButtonSkin);
					else if (tags.indexOf('绿色') != -1)
						b.setStyle('skinClass', SuccesButtonSkin);
					else if (tags.indexOf('黄色') != -1)
						b.setStyle('skinClass', WarningButtonSkin);
					else
						b.setStyle('skinClass', PrimaryButtonSkin);
					if (tags)
						b.label=tags.split(',')[0];
				}

				if (newButton)
				{
					buttonsGroup.addElement(b);
					b.alpha=0;
					b.addEventListener(FlexEvent.CREATION_COMPLETE, function(e:FlexEvent):void
					{
						var dt:Number=createTime - 0.1;
						if (dt > 0)
							TweenLite.to(b, dt, {alpha: 1});
						i++;
						createButtons();
						var v:Number=b.y + b.height;
						if (scroller.height < v)
							scroller.height=v < 200 ? b.y + b.height : 200;
					});
				}
				else
				{
					i++;
					createButtons();
				}

				b.addEventListener(MouseEvent.CLICK, broHandler);

				return b;
			}

			private var bros:Array;
			private var i:int;

			private var toload:int;

			private function createButtons():void
			{
				if (!bros)
					return;
				if (bros && i < bros.length)
					getButton(bros[i]);
//				else
//				{
//					to(API.instance.playingIndex);
//				}
			}

			private var createTime:int=1;
			private var rbv:RecordBroView;

			private var dic:Dictionary=new Dictionary();

			protected function broHandler(event:MouseEvent):void
			{
				var o:Object=dic[event.currentTarget];
				if (o is Array)
				{
					var n:NativeMenu=new NativeMenu();
					var arr:Array=[];
					for each (var item:Object in o)
					{
						var ni:NativeMenuItem=new NativeMenuItem(item.name);
						ni.data=item;
						ni.addEventListener(Event.SELECT, function(e:Event):void
						{
							var nmi:NativeMenuItem=e.target as NativeMenuItem;
							dispatchEvent(new ODataEvent(nmi.data));
						});
						arr.push(ni);
					}
					n.items=arr;
					n.display(this.stage, event.stageX, event.stageY);
				}
				else
				{
					if (o.type == InsertVO.CUSTOMIZE_BRO)
					{
						if (o.url)
						{
							PAlert.show('请问是直接播放已定制的广播，还是重新编辑？', '提示', null, function(value:String):void
							{
								if (value == PAlert.YES)
									dispatchEvent(new ODataEvent(o));
								else if (value == PAlert.NO)
									record(o as InsertVO);
							}, PAlert.YESNO, '直接播放', '重新定制');
						}
						else
							record(o as InsertVO);
					}
					else if (o.type == InsertVO.CUSTOMIZE_INSERT)
					{
						liv=new LocalInsertsView();
						PopupBoxManager.popup(liv, function():void
						{
							api.updateForRecord=true;
							api.initMenu();
							liv=null;
						});
					}
					else if (o.url)
						dispatchEvent(new ODataEvent(o));
				}
			}

			private function record(vo:InsertVO):void
			{
				var lp:ListPanel=this;
				PAlert.show('打开定制界面时会将所有播放声音的音量自动调节为零，请确认', '是否确认开始定制', null, function(value:String):void
				{
					if (value == PAlert.YES)
					{
						lp.dispatchEvent(new Event('startRecord'));
						rbv=new RecordBroView();
						rbv.vo=vo;
						PopupBoxManager.popup(rbv, function():void
						{
							api.recordLog(new LogVO(LogVO.NORMAL, 'record'));
							var so:SharedObject=SharedObject.getLocal('yp');
							var bros:Array=api.broadcasts;
							var arr:Array=[];
							for each (var o:Object in bros)
							{
								if (o.type == 1)
								{
									arr.push(o);
								}
							}
							trace(vo.name);
							so.data.records=arr;
							so.flush();

							buttonsGroup.removeAllElements();
							if (btnDic)
							{
								for (var key:String in btnDic)
								{
									delete btnDic[key];
								}
							}
							i=0;
							createButtons();
							lp.dispatchEvent(new Event('stopRecord'));
							api.updateForRecord=true;
							api.initMenu();
							rbv=null;
						});
					}
				}, PAlert.YESNO);
			}

			private var loaded:int;
			private var api:API;

//			private function autoload():void
//			{
//				return
//				var isArr:Boolean=bros is Array;
//				if (!bros)
//					return;
//				if (loaded != bros.length)
//				{
//					var vo:Object=bros[loaded];
//					var path:String=FileManager.savedDir + URLUtil.getCachePath(vo.url);
//					var f:File=new File(path);
//					if (f.exists)
//					{
//						loaded++;
//						if (loaded != bros.length)
//							autoload();
//					}
//					else
//					{
//						LoadManager.instance.load(vo.url, function():void
//						{
//							loaded++;
//							autoload();
//						}, URLUtil.getCachePath(vo.url));
//					}
//				}
//				else
//				{
//					trace('all bro loaded', loaded);
//				}
//			}
			private var liv:LocalInsertsView;

			protected function bb_changeHandler(event:IndexChangeEvent):void
			{
				trace(bb.selectedItem.name);
				var o:Object=bb.selectedItem;
				if (o is TimeVO)
				{
					songItems=new ArrayCollection(o.songs);
					timeInfo=DateUtil.getHMS((o as TimeVO).begin) + ' 至 ' + DateUtil.getHMS((o as TimeVO).end);
				}
				else
				{
					timeInfo='';
					if (o.type == 1)
					{
						songItems=new ArrayCollection(API.instance.songs);
					}
					else if (o.type == 2)
					{
						songItems=new ArrayCollection(API.instance.dmMenu.dm_list);
					}
				}
			}

			[Bindable]
			private var songItems:ArrayCollection;

			[Bindable]
			private var listInfo:String;

			protected function navHandler(event:Event):void
			{
				var nm:NativeMenuItem=event.target as NativeMenuItem;
				trace(nm.data);
				record(nm.data as InsertVO);
			}

			[Bindable]
			private var timeInfo:String;

			private function update():void
			{
				var menu:Object;
				menu=api.menu;
				if (!menu)
					return;
				var dmMenu:Object=API.instance.dmMenu;
				songItems=new ArrayCollection(api.songs);
				label='播放项目：' + menu.name + ' 开始日期：' + DateUtil.getYMD(menu.begin_date) + ' 结束日期：' + DateUtil.getYMD(menu.end_date);
				var ac:ArrayCollection=new ArrayCollection();
				ac.addItem({name: '完整列表', type: 1});
				if (dmMenu && dmMenu.dm_list && dmMenu.dm_list.length)
				{
					ac.addItem({name: '插播列表', type: 2});
				}
				for each (var m:TimeVO in menu.list)
				{
					ac.addItem(m);
				}
				if (api.isCurrentTimeLoop)
				{
					listInfo='曲目时长   曲目名称'
				}
				else
				{
					listInfo='播放时间   曲目名称'
				}
				bb.dataProvider=null
				TweenLite.delayedCall(0.5, function():void
				{
					bb.dataProvider=ac;
					bb.selectedIndex=0;
				});
				AA.say('play');
				if (api.playingIndex)
					to(api.playingIndex);
			}
		]]>
	</fx:Script>
	<s:VGroup gap="0"
			  width="100%"
			  height="100%"
			  paddingLeft="20"
			  paddingRight="20"
			  paddingTop="20"
			  paddingBottom="10">
		<s:Scroller id="scroller"
					mouseDown="event.stopImmediatePropagation()"
					width="100%"
					maxHeight="200"
					skinClass="skins.datagrid.list.ScrollSkin"
					horizontalScrollPolicy="off"
					verticalScrollPolicy="off">
			<s:Group id="buttonsGroup">
				<s:layout>
					<layouts:FlowLayout id="fl"
										horizontalGap="10"
										verticalGap="10"/>
				</s:layout>
			</s:Group>
		</s:Scroller>
		<s:Spacer height="18"/>
		<s:Label color="0xd9dee3"
				 fontSize="14"
				 text="{label}"/>
		<s:Spacer height="18"/>
		<s:HGroup verticalAlign="middle">
			<s:ButtonBar id="bb"
						 requireSelection="true"
						 color="0x303941"
						 selectedIndex="0"
						 change="bb_changeHandler(event)"
						 labelField="name"
						 skinClass="skins.buttons.DefaultButtonBarSkin"/>
			<s:Label text="{timeInfo}"
					 fontSize="14"
					 color="0xd9dee3"/>
		</s:HGroup>
		<s:Spacer height="8"/>
		<s:Label color="0xd9dee3"
				 fontSize="14"
				 text="{listInfo}"
				 visible="{label}"/>
		<s:List mouseDown="event.stopImmediatePropagation()"
				skinClass="skins.SongListSkin"
				width="100%"
				height="100%"
				dataProvider="{songItems}"
				itemRenderer="views.components.SongRenderer"
				id="songs">
		</s:List>
	</s:VGroup>
</s:Group>
