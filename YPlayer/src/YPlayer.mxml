<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   creationComplete="inited(event)"
					   preinitialize="pre(event)"
					   showStatusBar="false"
					   skinClass="skins.AppSkin"
					   preloader="views.preloaders.CustomPreloader"
					   mouseDown="nativeWindow.startMove()"
					   applicationComplete="windowedapplication1_applicationCompleteHandler(event)"
					   xmlns:nativeApplicationUpdater="com.youli.nativeApplicationUpdater.*"
					   xmlns:views="views.*">
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.pamakids.components.PAlert;
			import com.pamakids.managers.PopupBoxManager;
			import com.plter.air.windows.utils.RegCommand;
			import com.youli.components.LMouseData;
			import com.youli.messengers.PreloaderMessenger;

			import mx.events.FlexEvent;
			import mx.managers.ToolTipManager;

			import air.update.events.StatusUpdateEvent;
			import air.update.events.UpdateEvent;

			import controllers.AA;
			import controllers.API;

			[Bindable]
			private var updateURL:String;

			protected function inited(event:FlexEvent):void
			{
				var l:LMouseData=new LMouseData();
				Mouse.registerCursor('busy', l.mouseCursorData);

				if (AA.i.isMac)
					enter();
				else
					TweenLite.delayedCall(3, enter);

				nativeWindow.orderToFront();

				if (!Capabilities.isDebugger && NativeApplication.supportsStartAtLogin)
					NativeApplication.nativeApplication.startAtLogin=true;
			}

			protected function pre(event:FlexEvent):void
			{
				var v:String=API.instance.isTest ? 'test' : 'update';
				updateURL='http://yfcdn.qiniudn.com/file/' + v + '.xml' + '?' + Math.random();
				AA.centerWindow(nativeWindow);
//				updater.initialize();
				API.instance.checkUpdate();
				ToolTipManager.showEffect=fadeIn;
				ToolTipManager.hideEffect=fadeOut;
				ToolTipManager.showDelay=0;
				PAlert.PARENT=this
				PopupBoxManager.PARENT=this
			}

//			protected function updater_initializedHandler(event:UpdateEvent):void
//			{
//				updater.checkNow();
//			}

//			protected function updater_updateStatusHandler(event:StatusUpdateEvent):void
//			{
//				if (event.available)
//				{
//					trace(event.versionLabel);
//					API.instance.newVersion=event.version;
//					API.instance.updatable=true;
//					API.instance.updater=updater;
//				}
//				else
//				{
//					trace('软件最新');
//				}
//			}

			protected function updater_errorHandler(event:ErrorEvent):void
			{
				trace(event.toString());
			}

//			protected function updater_downloadCompleteHandler(event:UpdateEvent):void
//			{
//				updater.installUpdate();
//			}

			private function enter():void
			{
				PreloaderMessenger.say(PreloaderMessenger.SHOW_APP);
			}

//			protected function updater_checkForUpdateHandler(event:UpdateEvent):void
//			{
//				event.preventDefault();
//				updater.checkForUpdate();
//			}

			protected function handler(event:UncaughtErrorEvent):void
			{
				API.instance.appendLog(event.toString());
			}

			protected function windowedapplication1_applicationCompleteHandler(event:FlexEvent):void
			{
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, handler);
			}
		]]>
	</fx:Script>

	<fx:Style source="assets/font/font.css"/>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace views "views.*";
		@namespace nativeApplicationUpdater "com.youli.nativeApplicationUpdater.*";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace components "com.pamakids.components.*";
		global
		{
			fontFamily:"Microsoft YaHei";
			focusThickness:0;
			focusAlpha:0;
		}
		
		components|NiceToolTip.errorTip
		{
			color: "#f8f8f8";
			chromeColor: "0xe02010";
			fontSize: 13;
		}
		
		components|NiceToolTip
		{
			fontSize: 13;
			color:"0x505050";
			chromeColor:"0xe8e8e8";
		}
		
		components|PopupBox{
			skinClass:ClassReference("skins.popup.PopupBoxSkin")
		}
	</fx:Style>

	<fx:Declarations>
		<s:Fade id="fadeIn"
				duration="300"
				alphaFrom="0"
				alphaTo="1"/>
		<s:Fade id="fadeOut"
				duration="100"
				alphaFrom="1"
				alphaTo="0"/>
		<!--<nativeApplicationUpdater:NativeApplicationUpdater id="updater"
														   updateURL="{updateURL}"
														   initialized="updater_initializedHandler(event)"
														   updateStatus="updater_updateStatusHandler(event)"
														   checkForUpdate="updater_checkForUpdateHandler(event)"
														   error="updater_errorHandler(event)"
														   downloadError="updater_errorHandler(event)"
														   downloadComplete="updater_downloadCompleteHandler(event)"
														   updateError="updater_errorHandler(event)"/>-->
	</fx:Declarations>

	<s:Rect left="2"
			right="2"
			top="1"
			bottom="2">
		<s:fill>
			<s:SolidColor color="0x30373e"/>
		</s:fill>
		<s:filters>
			<s:GlowFilter color="0"/>
		</s:filters>
	</s:Rect>

	<views:Main/>
	<s:Label fontSize="28"
			 width="100%"
			 height="100%"
			 text="{API.instance.progress}"
			 visible="{API.instance.progress}"
			 mouseChildren="false"
			 mouseEnabled="false"
			 paddingLeft="50"
			 paddingRight="50"
			 paddingBottom="100"
			 textAlign="center"
			 verticalAlign="middle"
			 paddingTop="180"
			 color="0x2E80D5"/>

</s:WindowedApplication>
