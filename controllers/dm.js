// Generated by CoffeeScript 1.7.1
(function() {
  var DM, Dict, UpdateObject, auth;

  auth = require('../lib/auth');

  DM = require('../models').DM;

  Dict = require('../models').Dict;

  UpdateObject = require('../lib/utils').updateObject;

  module.exports = function(app) {
    var updateTags;
    updateTags = function(tags) {
      if (tags) {
        return Dict.findOne({
          'key': 'DMTags'
        }, function(err, dic) {
          if (dic) {
            if (dic.list) {
              tags.forEach(function(tag) {
                if (dic.list.indexOf(tag) === -1) {
                  return dic.list.addToSet(tag);
                }
              });
            } else {
              dic.list = tags;
            }
          } else {
            dic = new Dict({
              key: 'DMTags',
              list: tags
            });
          }
          return dic.save();
        });
      }
    };
    app.get('/dm', auth.isAuthenticated(), function(req, res) {
      return res.render('dm');
    });
    app.get('/dm_menu', auth.isAuthenticated(), function(req, res) {
      return res.render('dm_menu');
    });
    app.get('/dm/list', auth.isAuthenticated(), function(req, res) {
      var arr, data, query, tags;
      data = req.query;
      query = {};
      if (data.name) {
        query = {
          'name': new RegExp(data.name, 'i')
        };
      }
      tags = data.tags;
      if (tags) {
        arr = tags.split(',');
        query.tags = {
          $all: arr
        };
      }
      return DM.find(query).populate('creator', 'username').populate('updator', 'username').sort({
        'created_at': -1
      }).limit(data.perPage).skip(data.perPage * (data.page - 1)).exec(function(err, result) {
        if (err) {
          return Error(err, res);
        } else {
          return res.json({
            status: true,
            results: result
          });
        }
      });
    });
    app.post('/dm/update', auth.isAuthenticated(), function(req, res) {
      var data;
      data = req.body;
      data.updator = req.user._id;
      return DM.findById(data._id, function(err, result) {
        if (err) {
          return Error(err, res);
        } else {
          UpdateObject(result, data);
          return result.save(function(err, result) {
            if (err) {
              return Error(err, res);
            } else {
              updateTags(result.tags);
              return res.json({
                status: true,
                results: result
              });
            }
          });
        }
      });
    });
    app.post('/dm/update/status', auth.isAuthenticated(), function(req, res) {
      var data;
      data = req.body;
      return DM.findByIdAndUpdate(data._id, {
        $set: {
          disabled: data.disabled
        }
      }, function(err, result) {
        if (err) {
          return Error(err, res);
        } else {
          return res.json({
            status: true,
            result: result
          });
        }
      });
    });
    return app.post('/dm/add', auth.isAuthenticated(), function(req, res) {
      var arr, data, date, dm;
      data = req.body;
      if (data.published_at && data.published_at.indexOf('-') !== 0) {
        arr = data.published_at.split('-');
        date = new Date(arr[0], arr[1], arr[2]);
        data.published_at = date;
      }
      dm = new DM(data);
      dm.creator = req.user;
      return dm.save(function(err, result) {
        if (err) {
          return Error(err, res);
        } else {
          updateTags(result.tags);
          return res.json({
            status: true,
            results: result
          });
        }
      });
    });
  };

}).call(this);

//# sourceMappingURL=dm.map
