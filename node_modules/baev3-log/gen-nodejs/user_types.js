//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ttypes.BaeRet = {
'OK' : 0,
'RETRY' : 1,
'OLD_VERSION' : 2,
'AUTH_PARM_ERROR' : 3,
'AUTH_FAIL' : 4,
'AUTH_ASK_NOT_EXIST' : 5,
'AUTH_ASK_NOT_MATCH' : 6,
'AUTH_QUOTA_NOT_INIT' : 7,
'AUTH_QUOTA_EXCEED' : 8,
'AUTH_QUOTA_UPDATE_ERROR' : 9,
'AUTH_CONN_FAIL' : 10,
'INTERNAL_ERROR' : 11
};
ttypes.BaeLogLevel = {
'FATAL' : 1,
'WARNING' : 2,
'NOTICE' : 4,
'TRACE' : 8,
'DEBUG' : 16
};
UserLogEntry = module.exports.UserLogEntry = function(args) {
  this.appid = null;
  this.level = null;
  this.timestamp = null;
  this.msg = null;
  this.logid = null;
  this.tag = null;
  if (args) {
    if (args.appid !== undefined) {
      this.appid = args.appid;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.logid !== undefined) {
      this.logid = args.logid;
    }
    if (args.tag !== undefined) {
      this.tag = args.tag;
    }
  }
};
UserLogEntry.prototype = {};
UserLogEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.logid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserLogEntry.prototype.write = function(output) {
  output.writeStructBegin('UserLogEntry');
  if (this.appid !== null && this.appid !== undefined) {
    output.writeFieldBegin('appid', Thrift.Type.STRING, 1);
    output.writeString(this.appid);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 2);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 4);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.logid !== null && this.logid !== undefined) {
    output.writeFieldBegin('logid', Thrift.Type.STRING, 8);
    output.writeString(this.logid);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 9);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecretEntry = module.exports.SecretEntry = function(args) {
  this.user = null;
  this.passwd = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.passwd !== undefined) {
      this.passwd = args.passwd;
    }
  }
};
SecretEntry.prototype = {};
SecretEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.passwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecretEntry.prototype.write = function(output) {
  output.writeStructBegin('SecretEntry');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.passwd !== null && this.passwd !== undefined) {
    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);
    output.writeString(this.passwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaeLogEntry = module.exports.BaeLogEntry = function(args) {
  this.category = null;
  this.content = null;
  if (args) {
    if (args.category !== undefined) {
      this.category = args.category;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
BaeLogEntry.prototype = {};
BaeLogEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaeLogEntry.prototype.write = function(output) {
  output.writeStructBegin('BaeLogEntry');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 1);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaeLog = module.exports.BaeLog = function(args) {
  this.messages = null;
  this.secret = null;
  if (args) {
    if (args.messages !== undefined) {
      this.messages = args.messages;
    }
    if (args.secret !== undefined) {
      this.secret = args.secret;
    }
  }
};
BaeLog.prototype = {};
BaeLog.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.messages = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.BaeLogEntry();
          elem6.read(input);
          this.messages.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.secret = new ttypes.SecretEntry();
        this.secret.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaeLog.prototype.write = function(output) {
  output.writeStructBegin('BaeLog');
  if (this.messages !== null && this.messages !== undefined) {
    output.writeFieldBegin('messages', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.messages.length);
    for (var iter7 in this.messages)
    {
      if (this.messages.hasOwnProperty(iter7))
      {
        iter7 = this.messages[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRUCT, 2);
    this.secret.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

